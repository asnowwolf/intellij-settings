<application>
  <component name="AppStorage">
    <histories>
      <item value="Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure." />
      <item value="&quot;organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations.&quot;" />
      <item value="The Angular CLI outputs the client-side code in the `dist` directory by default, so you modify the `outputPath` for the __build__ target in the `angular.json` to keep the client-side build outputs separate from the server-side code. The client-side build output will be served by the Express server." />
      <item value="A Universal app is distributed in two parts: the server-side code that serves up the initial application, and the client-side code that's loaded in dynamically." />
      <item value="`mat-typography-level-to-styles($config, $level)` - Mixin that takes in a configuration object and a typography level, and outputs a short-hand CSS `font` declaration." />
      <item value="Angular Material includes typography utility mixins and functions that you can use to customize your own components" />
      <item value="Angular Material includes typography utility mixins and functions that you can use to customize your&#10;own components:" />
      <item value="Typography customization is an extension of Angular Material's Sass-based theming. Similar to creating a custom theme, you can create a custom **typography configuration**." />
      <item value="host" />
      <item value="The typography levels are collected into a typography config which is used to generate the CSS." />
      <item value="Smaller body and hint text." />
      <item value="Bolder body text." />
      <item value="Typography is a way of arranging type to make text legible, readable, and appealing when displayed. Angular Material's typography is based on the guidelines from the [Material Design spec][1] and is arranged into typography levels. Each level has a `font-size`, `line-height` and `font-weight`. The available levels are:" />
      <item value="legible" />
      <item value="# Angular Material typography" />
      <item value="This file should contain everything that is not affected by the theme like sizes, transitions..." />
      <item value="When using `@mixin`, the theme file should only contain the definitions that are affected by the passed-in theme." />
      <item value="Now you just have to call the `@mixin` function to apply the theme:" />
      <item value="In order to style your own components with Angular Material's tooling, the component's styles must be defined with Sass." />
      <item value="Once CSS variables (custom properties) are available in all the browsers we support, we will explore how to take advantage of them to make theming even simpler." />
      <item value="ripples" />
      <item value="You can include as many themes as you like in this manner. You can also `@include` the `angular-material-theme` in separate files and then lazily load them based on an end-user interaction (how to lazily load the CSS assets will vary based on your application)." />
      <item value="In particular," />
      <item value="Dashboard" />
      <item value="If you run it will automatically install Angular Material for you and run the install schematic." />
      <item value="schematic" />
      <item value="Since an elevation shadow consists of multiple shadow components of varying opacities, the `$opacity` argument of the mixin is considered a factor by which to scale these initial values rather than an absolute value." />
      <item value="Angular Material's elevation classes and mixins allow you to add separation between elements along the z-axis. All material design elements have resting elevations. In addition, some elements may change their elevation in response to user interaction. The [Material Design spec](https://material.io/design/environment/elevation.html) explains how to best use elevation." />
      <item value="elevation" />
      <item value="Use a deprecated shadow-piercing descendant combinator to force styles to apply to all the child elements. Read more about this deprecated solution in the [Angular documentation](https://angular.io/guide/component-styles#deprecated-deep--and-ng-deep)." />
      <item value="Some Angular Material components, specifically overlay-based ones like MatDialog, MatSnackbar, etc., do not exist as children of your component. Often they are injected elsewhere in the DOM. This is important to keep in mind, since even using high specificity and shadow-piercing selectors will not target elements that are not direct children of your component. Global styles are recommended for targeting such components." />
      <item value="##### Selector specificity" />
      <item value="Is the component a child of your component, or does it exist elsewhere in the DOM?" />
      <item value="2. Are your styles more specific than the defaults?" />
      <item value="In our case we'll just focus the first `&lt;input&gt;` if the user isn't about to click an `&lt;input&gt;` anyways." />
      <item value="This property allows us to specify a unique string for the type of control in form field. The `&lt;mat-form-field&gt;` will add an additional class based on this type that can be used to easily apply special styles to a `&lt;mat-form-field&gt;` that contains a specific type of control. In this example we'll use `my-tel-input` as our control type which will result in the form field adding the class `mat-form-field-my-tel-input`." />
      <item value="This property is used to indicate whether the label should be in the floating position. We'll use the same logic as `matInput` and float the placeholder when the input is focused or non-empty. Since the placeholder will be overlapping our control when when it's not floating, we should hide the `–` characters when it's not floating." />
      <item value="This property is used to indicate whether the label should be in the floating position. We'll&#10;use the same logic as `matInput` and float the placeholder when the input is focused or non-empty.&#10;Since the placeholder will be overlapping our control when when it's not floating, we should hide the `–` characters when it's not floating." />
      <item value="id" />
      <item value="complete" />
      <item value="Because the `&lt;mat-form-field&gt;` uses the `OnPush` change detection strategy, we need to let it know when something happens in the form field control that may require the form field to run change detection. We do this via the `stateChanges` property. So far the only thing the form field needs to know about is when the value changes. We'll need to emit on the stateChanges stream when that happens, and as we continue flushing out these properties we'll likely find more places we need to emit. We should also make sure to complete `stateChanges` when our component is destroyed." />
      <item value="robust" />
      <item value="It is possible to create custom form field controls that can be used inside `&lt;mat-form-field&gt;`. This can be useful if you need to create a component that shares a lot of common behavior with a form field, but adds some additional logic." />
      <item value="Creating a custom form field control" />
      <item value="jittery" />
      <item value="Also, sticky positioning in Edge will appear shaky for special cases. For example, if the scrolling container has a complex box shadow and has sibling elements, the stuck cells will appear jittery. There is currently an [open issue with Edge](https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/17514118/) to resolve this." />
      <item value="Note that on Safari mobile when using the flex-based table, a cell stuck in more than one direction will struggle to stay in the correct position as you scroll. For example, if a header row is stuck to the top and the first column is stuck, then the top-left-most cell will appear jittery as you scroll." />
      <item value="Finally, adjust the styling for the select column so that its overflow is not hidden. This allows the ripple effect to extend beyond the cell." />
      <item value="incorporate" />
      <item value="To override the default filtering behavior, a custom `filterPredicate` function can be set which takes a data object and filter string and returns true if the data object is considered a match." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="313" />
        <entry key="ENGLISH" value="315" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>