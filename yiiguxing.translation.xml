<application>
  <component name="AppStorage">
    <histories>
      <item value="For most real-world applications, providing the table a DataSource instance will be the best way to manage data. The DataSource is meant to serve a place to encapsulate any sorting, filtering, pagination, and data retrieval logic specific to the application." />
      <item value="The simplest way to provide data to your table is by passing a data array. More complex use-cases may benefit from a more flexible approach involving an Observable stream or by encapsulating your data source logic into a `DataSource` class." />
      <item value="Directionality" />
      <item value="# Angular Material bi-directionality" />
      <item value="You can use either the npm or yarn command-line tool to install packages. Use whichever is appropriate for your project in the examples below." />
      <item value="A `matTreeNodeToggle` can be added in the tree node template to expand/collapse the tree node. The toggle toggles the expand/collapse functions in `TreeControl` and is able to expand/collapse a tree node recursively by setting `[matTreeNodeToggleRecursive]` to `true`." />
      <item value="Toggle" />
      <item value="The `&lt;mat-tree&gt;` itself only deals with the rendering of a tree structure.&#10;Additional features can be built on top of the tree by adding behavior inside node templates (e.g., padding and toggle). Interactions that affect the rendered data (such as expand/collapse) should be propagated through the table's data source." />
      <item value="Nested trees are easier to work with when hierarchical relationships are visually represented in ways that would be difficult to accomplish with flat nodes." />
      <item value="variations" />
      <item value="In a flat tree, the hierarchy is flattened; nodes are not rendered inside of each other, but instead are rendered as siblings in sequence. An instance of `TreeFlattener` is used to generate the flat list of items from hierarchical data. The &quot;level&quot; of each tree node is read through the `getLevel` method of the `TreeControl`; this level can be used to style the node such that it is indented to the appropriate level." />
      <item value="similar" />
      <item value="If a tooltip will only be shown manually via click, keypress, etc., then extra care should be taken such that the action behaves similarly for screen-reader users. One possible approach would be to use the `LiveAnnouncer` from the `cdk/a11y` package to announce the tooltip content on such an interaction." />
      <item value="Only if the use-case of the toolbar match that of role=&quot;toolbar&quot;, the user should add the role and an appropriate label via `aria-label` or `aria-labelledby`." />
      <item value="Generally, the toolbar is used as a header where `role=&quot;heading&quot;` would be appropriate." />
      <item value="The toolbar does not perform any positioning of its content. This gives the user full power to position the content as it suits their application." />
      <item value="Tab contents can be lazy loaded by declaring the body in a `ng-template` with the `matTabContent` attribute." />
      <item value="If the tab contains several complex child components or the tab's contents rely on DOM calculations during initialization, it is advised to lazy load the tab's content." />
      <item value="eagerly" />
      <item value="The `tab-nav-bar` is not tied to any particular router; it works with normal `&lt;a&gt;` elements and uses the `active` property to determine which tab is currently active. The corresponding `&lt;router-outlet&gt;` can be placed anywhere in the view." />
      <item value="While `&lt;mat-tab-group&gt;` is used to switch between views within a single route, `&lt;nav mat-tab-nav-bar&gt;` provides a tab-like UI for navigating between routes." />
      <item value="Angular Material tab set organize content into separate views where only one view can be visible at a time. Each tab's label is shown in the tab header and the active tab's label is designated with the animated ink bar. When the list of tab labels exceeds the width of the header, pagination controls appear to let the user scroll left and right across the labels." />
      <item value="Angular Material tabs organize content into separate views where only one view can be visible at a time. Each tab's label is shown in the tab header and the active tab's label is designated with the animated ink bar. When the list of tab labels exceeds the width of the header, pagination controls appear to let the user scroll left and right across the labels." />
      <item value="the content that can be expanded upon selection is given `role=&quot;tabpanel&quot;`" />
      <item value="the content that can be expanded upon selection is given&#10;`role=&quot;tabpanel&quot;`" />
      <item value="Labels used by the stepper are provided through `MatStepperIntl`. Localization of these messages can be done by providing a subclass with translated values in your application root module." />
      <item value="Note that you aren't limited to using the `mat-icon` component when providing custom icons." />
      <item value="however" />
      <item value="Snack-bars that have an action available should not be given a `duration`, as to accomodate screen-reader users that want to navigate to the snack-bar element to activate the action. If the user has manually moved their focus within the snackbar, focus should be placed somewhere sensible based on the application context when the snack-bar is dismissed." />
      <item value="Utilities to respond to changes in LTR/RTL layout direction." />
      <item value="A configurable component for displaying tabular data." />
      <item value="Displays short actionable messages as an uninvasive alert." />
      <item value="Presents a list of items as a set of small, tactile entities." />
      <item value="A small value indicator that can be overlaid on another object." />
      <item value="A groupable on/off toggle for enabling and disabling options." />
      <item value="An interactive button with a range of presentation options." />
      <item value="Only presents one view at a time from a provided set of views." />
      <item value="Presents content as steps through which to progress." />
      <item value="Presents conventional lists of items." />
      <item value="A styled container for pieces of itemized content." />
      <item value="`MatSnackBar` is a service for displaying snack-bar notifications." />
      <item value="The `tickInterval` can also be set to `auto` which will automatically choose the number of steps such that there is at least `30px` of space between ticks." />
      <item value="By default, sliders do not show tick marks along the thumb track. This can be enabled using the tickInterval attribute. The value of tickInterval should be a number representing the number of steps between between ticks. For example a tickInterval of 3 with a step of 4 will draw tick marks at every 3 steps, which is the same as every 12 values." />
      <item value="By default, sliders do not show tick marks along the thumb track. This can be enabled using the `tickInterval` attribute. The value of `tickInterval` should be a number representing the number of steps between between ticks. For example a `tickInterval` of `3` with a `step` of `4` will draw tick marks at every `3` steps, which is the same as every `12` values." />
      <item value="By default, the value in the slider's thumb label will be the same as the model value, however this may end up being too large to fit into the label. If you want to control the value that is being displayed, you can do so using the `displayWith` input." />
      <item value="discrete" />
      <item value="An `invert` attribute is also available which can be specified to flip the axis that the thumb moves along. An inverted horizontal slider will have the minimum value on the right and the maximum value on the left, while an inverted vertical slider will have the minimum value on top and the maximum value on bottom." />
      <item value="By default the minimum value of the slider is `0`, the maximum value is `100`, and the thumb moves in increments of `1`. These values can be changed by setting the `min`, `max`, and `step` attributes respectively. The initial value is set to the minimum value unless otherwise specified." />
      <item value="_Note: the sliding behavior for this component requires that HammerJS is loaded on the page._" />
      <item value="`&lt;mat-slider&gt;` allows for the selection of a value from a range via mouse, touch, or keyboard, similar to `&lt;input type=&quot;range&quot;&gt;`." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="249" />
        <entry key="ENGLISH" value="251" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>