<application>
  <component name="AppStorage">
    <histories>
      <item value="You now have a basic routable animation that animates routing from one view to another." />
      <item value="Calls the `animateChild()` method on the new view to run its child animations after the main animation completes." />
      <item value="Slides in the new view by animating the view with an easing function and duration. &lt;/br&gt; This animation results in the `about` view sliding from the left to right." />
      <item value="`query(':enter style({ left: '-100%'})` matches the view that is added and hides the newly added view by positioning it to the far left." />
      <item value="The animation code does the following after styling the views:" />
      <item value="Use the `query()` method to find and animate elements within the current host component. The `query(&quot;:enter&quot;)` statement returns the view that is being inserted, and `query(&quot;:leave&quot;)` returns the view that is being removed." />
      <item value="During a transition, a new view is inserted directly after the old one and both elements appear on screen at the same time. To prevent this, apply additional styling to the host view, and to the removed and inserted child views. The host view must use relative positioning, and the child views must use absolute positioning. Adding styling to the views animates the containers in place, without the DOM moving things around." />
      <item value="Make the animation definition available in your application by adding the reusable animation (`slideInAnimation`) to the `animations` metadata of the `AppComponent`." />
      <item value="A route change activates the animation trigger, and a transition matching the state change is applied." />
      <item value="* Uses `query()` to determine which child view is entering and which is leaving the host view." />
      <item value="Animations can be defined directly inside your components. For this example we are defining the animations in a separate file, which allows us to re-use the animations." />
      <item value="Here, the `prepareRoute()` method takes the value of the output directive (established through `#outlet=&quot;outlet&quot;`) and returns a string value representing the state of the animation based on the custom data of the current active route. You can use this data to control which transition to execute for each route." />
      <item value="`AppComponent` defines a method that can detect when a view changes. The method assigns an animation state value to the animation trigger (`@routeAnimation`) based on the route configuration `data` property value. Here's an example of an `AppComponent` method that detects when a route change happens." />
      <item value="The `&lt;router-outlet&gt;` container has an attribute directive that contains data about active routes and their states, based on the `data` property that we set in the route configuration." />
      <item value="After configuring the routes, tell the Angular router where to render the views when matched with a route. You can set a router outlet by inserting a `&lt;router-outlet&gt;` container inside the root `AppComponent` template." />
      <item value="**Note:** The `data` property names that you use can be arbitrary. For example, the name *animation* used in the example above is an arbitrary choice." />
      <item value="In addition to `path` and `component`, the `data` property of each route defines the key animation-specific configuration associated with a route. The `data` property value is passed into `AppComponent` when the route changes. You can also pass additional data in route config that is consumed within the animation. The data property value has to match the transitions defined in the `routeAnimation` trigger, which we'll define later." />
      <item value="The following configuration defines the possible routes for the application." />
      <item value="To begin, configure a set of routes using methods available in the `RouterModule` class. This route configuration tells the router how to navigate." />
      <item value="Let's illustrate a router transition animation by navigating between two routes, *Home* and *About* associated with the `HomeComponent` and `AboutComponent` views respectively. Both of these component views are children of the top-most view, hosted by `AppComponent`. We'll implement a router transition animation that slides in the new view to the right and slides out the old view when the user navigates between the two routes." />
      <item value="The Angular router comes with high-level animation functions that let you animate the transitions between views when a route changes. To produce an animation sequence when switching between routes, you need to define nested animation sequences. Start with the top-level component that hosts the view, and nest additional animations in the components that host the embedded views." />
      <item value="Routing enables users to navigate between different routes in an application. When a user navigates from one route to another, the Angular router maps the URL path to a relevant component and displays its view. Animating this route transition can greatly enhance the user experience." />
      <item value="To create a reusable animation, use the [`animation()`](https://angular.io/api/animations/animation) method to define an animation in a separate `.ts` file and declare this animation definition as a `const` export variable. You can then import and reuse this animation in any of your app components using the [`useAnimation()`](https://angular.io/api/animations/useAnimation) API." />
      <item value="Angular functions for animating multiple elements start with `query()` to find inner elements, for example gathering all images within a `&lt;div&gt;`. The remaining functions, `stagger()`, `group()`, and `sequence()`, apply cascades or allow you to control how multiple animation steps are applied." />
      <item value="If there are multiple matching elements, staggers in each element starting at the top of the page, with a 50-millisecond delay between each element." />
      <item value="Animates in the element over 300 milliseconds. During the animation, the element assumes its default width and opacity." />
      <item value="Hides the element by making it completely transparent and infinitely narrow, by setting its opacity and width to 0." />
      <item value="* Performs a filter match for matches." />
      <item value="Ignores any animations that are performed when the user first opens or navigates to this page. The filter narrows what is already there, so it assumes that any HTML elements to be animated already exist in the DOM." />
      <item value="The filter works in real time as you type. Elements leave the page as you type each new letter and the filter gets progressively stricter. The heroes list gradually re-enters the page as you delete each letter in the filter box." />
      <item value="Let's take a look at another animation on the live example page. Under the Filter/Stagger tab, enter some text into the **Search Heroes** text box, such as `Magnet` or `tornado`." />
      <item value="A second function called `sequence()` lets you run those same animations one after the other. Within `sequence()`, the animation steps consist of either `style()` or `animate()` function calls." />
      <item value="Complex animations can have many things happening at once. But what if you want to create an animation involving several animations happening one after the other? Earlier we used `group()` to run multiple animations all at the same time, in parallel." />
      <item value="In the following example, using groups on both `:enter` and `:leave` allow for two different timing configurations. They're applied to the same element in parallel, but run independently." />
      <item value="You've seen how to add a delay between each successive animation. But you may also want to configure animations that happen in parallel. For example, you may want to animate two CSS properties of the same element but use a different `easing` function for each one. For this, you can use the animation `group()` function." />
      <item value="Animate each element on screen for 0.5 seconds using a custom-defined easing curve, simultaneously fading it in and un-transforming it." />
      <item value="For each of these elements, use `style()` to set the same initial style for the element. Make it invisible and use `transform` to move it out of position so that it can slide into place." />
      <item value="Use `query()` to look for any element entering or leaving the page. The query specifies elements meeting certain CSS class criteria." />
      <item value="The following example demonstrates how to use `query()` and `stagger()` functions on the entry of an animated element." />
      <item value="The Filter/Stagger tab in the live example shows a list of heroes with an introductory sequence. The entire list of heroes cascades in, with a slight delay from top to bottom." />
      <item value="The `stagger()` function allows you to define a timing gap between each queried item that is animated and thus animates elements with a delay between them." />
      <item value="The `query()` function allows you to find inner elements within the element that is being animated. This function targets specific HTML elements within a parent component and applies animations to each element individually. Angular intelligently handles setup, teardown, and cleanup as it coordinates the elements across the page." />
      <item value="* `stagger()` applies a cascading delay to animations for multiple elements." />
      <item value="So far, we've learned simple animations of single HTML elements. Angular also lets you animate coordinated sequences, such as an entire grid or list of elements as they enter and leave a page. You can choose to run multiple animations in parallel, or run discrete animations sequentially, one following another." />
      <item value="The `keyframes()` function in Angular allows you to specify multiple interim styles within a single transition, with an optional offset to define the point in the animation where each style change occurs." />
      <item value="In this example, we have a trigger called `shrinkOut`, used when an HTML element leaves the page. The animation takes whatever height the element has before it leaves, and animates from that height to zero." />
      <item value="In these cases, you can use a special wildcard `*` property value under `style()`, so that the value of that particular style property is computed at runtime and then plugged into the animation." />
      <item value="Sometimes you don't know the value of a dimensional style property until runtime. For example, elements often have widths and heights that depend on their content and the screen size. These properties are often challenging to animate using CSS." />
      <item value="If you don't provide a unit when specifying dimension, Angular assumes a default unit of pixels, or px. Expressing 50 pixels as `50` is the same as saying `'50px'`." />
      <item value="For positional properties with a numeric value, define a unit by providing the value as a string, in quotes, with the appropriate suffix:" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="653" />
        <entry key="ENGLISH" value="658" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>