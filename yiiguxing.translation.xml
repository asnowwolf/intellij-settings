<application>
  <component name="AppStorage">
    <histories>
      <item value="Components created via `MatDialog` can _inject_ `MatDialogRef` and use it to close the dialog in which they are contained. When closing, an optional result value can be provided. This result value is forwarded as the result of the `afterClosed` promise." />
      <item value="#### Watching the views for changes on selected years and months" />
      <item value="The month, year, or range of years that the calendar opens to is determined by first checking if any date is currently selected, if so it will open to the month or year containing that date. Otherwise it will open to the month or year containing today's date. This behavior can be overridden by using the `startAt` property of `&lt;mat-datepicker&gt;`. In this case the calendar will open to the month or year containing the `startAt` date." />
      <item value="neutral" />
      <item value="The `MatChipInput` directive can be used together with a chip-list to streamline the interaction between the two components. This directive adds chip-specific behaviors to the input element within `&lt;mat-form-field&gt;` for adding and removing chips. The `&lt;input&gt;` with `MatChipInput` can be placed inside or outside the chip-list element." />
      <item value="Presents a list of items as a set of small, tactile entities." />
      <item value="`&lt;mat-chip-list&gt;` displays a list of values as individual, keyboard accessible, chips." />
      <item value="While the `indeterminate` property of the checkbox is true, it will render as indeterminate regardless of the `checked` value. Any interaction with the checkbox by a user (i.e., clicking) will remove the indeterminate state." />
      <item value="### Indeterminate state" />
      <item value="Depending on how cards are used, it may be appropriate to apply a `tabindex` to the `&lt;mat-card&gt;` element. If cards are a primary mechanism through which user interact with the application, `tabindex=&quot;0&quot;` is appropriate. If attention can be sent to the card, but it's not part of the document flow, `tabindex=&quot;-1&quot;` is appropriate." />
      <item value="A role is not necessary when the card is used as a purely decorative container that does not convey a meaningful grouping of related content for a single subject. In these cases, the content of the card should follow standard practices for document content." />
      <item value="There are several ARIA roles that communicate that a portion of the UI represents some semantically meaningful whole. Depending on what the content of the card means to your application, [`role=&quot;group&quot;`][0], [`role=&quot;region&quot;`][1], or [one of the landmark roles][2] should typically be applied to the `&lt;mat-card&gt;` element." />
      <item value="landmarks" />
      <item value="In addition to the aforementioned sections, `&lt;mat-card-header&gt;` gives the ability to add a rich header to a card. This header can contain:" />
      <item value="### Exclusive selection vs. multiple selection" />
      <item value="According to the Material design spec button text has to be capitalized, however we have opted not to capitalize buttons automatically via `text-transform: uppercase`, because it can cause issues in certain locales. It is also worth noting that using ALL CAPS in the text itself causes issues for screen-readers, which will read the text character-by-character. We leave the decision of how to approach this to the consuming app." />
      <item value="It is also worth noting that using ALL CAPS in the text itself causes issues for screen-readers, which will read the text character-by-character. We leave the decision of how to approach this to the consuming app." />
      <item value="capitalization" />
      <item value="Circular button with a transparent background, meant to contain an icon" />
      <item value="Rectangular contained button w/" />
      <item value="&lt;p translation-result&gt;方形&lt;/p&gt;&lt;p translation-origin=&quot;off&quot;&gt;Rectangular contained button w/ elevation &lt;/p&gt;" />
      <item value="contained" />
      <item value="Rectangular text button w/ no elevation" />
      <item value="Native `&lt;button&gt;` and `&lt;a&gt;` elements are always used in order to provide the most straightforward and accessible experience for users. A `&lt;button&gt;` element should be used whenever some _action_ is performed. An `&lt;a&gt;` element should be used whenever the user will _navigate_ to another view." />
      <item value="ripples" />
      <item value="By default, the bottom sheet has `role=&quot;dialog&quot;` on the root element and can be labelled using the `ariaLabel` property on the `MatBottomSheetConfig`." />
      <item value="Badges can be colored in terms of the current theme using the `matBadgeColor` property to set the background color to `primary`, `accent`, or `warn`." />
      <item value="The overlap of the badge in relation to its inner contents can also be defined&#10;using the `matBadgeOverlap` tag. Typically, you want the badge to overlap an icon and not a text phrase. By default it will overlap." />
      <item value="Badges are small status descriptors for UI elements. A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to&#10;another object." />
      <item value="Badges are small status descriptors for UI elements. A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object." />
      <item value="The autocomplete trigger is given `role=&quot;combobox&quot;`. The trigger sets `aria-owns` to the autocomplete's id, and sets `aria-activedescendant` to the active option's id." />
      <item value="访问性" />
      <item value="optimal" />
      <item value="\*For optimal accessibility, you may want to consider adding text guidance on the page to explain filter criteria. This is especially helpful for screenreader users if you're using a non-standard filter that doesn't limit matches to the beginning of the string." />
      <item value="Next, create the autocomplete panel and the options displayed inside it. Each option should be defined by an `mat-option` tag. Set each option's value property to whatever you'd like the value of the text input to be upon that option's selection." />
      <item value="Next, create the autocomplete panel and the options displayed inside it. Each option should be&#10;defined by an `mat-option` tag. Set each option's value property to whatever you'd like the value&#10;of the text input to be upon that option's selection." />
      <item value="It is possible to use template-driven forms instead, if you prefer." />
      <item value="It is possible to use template-driven forms instead," />
      <item value="Tools for implementing common application features." />
      <item value="Tools for displaying and interacting with tabular data." />
      <item value="Progress spinner" />
      <item value="Badge" />
      <item value="Buttons &amp; Indicators" />
      <item value="elevation" />
      <item value="typography" />
      <item value="Theming Angular Material" />
      <item value="Wraps input fields so they are displayed consistently." />
      <item value="Captures dates, agnostic about their internal representation." />
      <item value="Captures boolean input with an optional indeterminate mode." />
      <item value="Suggests relevant options as the user types." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="78" />
        <entry key="ENGLISH" value="80" />
      </map>
    </option>
  </component>
</application>