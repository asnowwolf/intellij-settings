<application>
  <component name="AppStorage">
    <histories>
      <item value="However" />
      <item value="There are three properties that add date validation to the datepicker input. The first two are the `min` and `max` properties. In addition to enforcing validation on the input, these properties will disable all dates on the calendar popup before or after the respective values and prevent the user from advancing the calendar past the `month` or `year` (depending on current view) containing the `min` or `max` date." />
      <item value="Depending on the `DateAdapter` being used, the datepicker may automatically deserialize certain date formats for you as well. For example, both the `NativeDateAdapter` and `MomentDateAdapter` allow [ISO 8601](https://tools.ietf.org/html/rfc3339) strings to be passed to the datepicker and automatically converted to the proper object type. This can be convenient when binding data directly from your backend to the datepicker. However, the datepicker will not accept date strings formatted in user format such as `&quot;1/2/2017&quot;` as this is ambiguous and will mean different things depending on the locale of the browser running the code." />
      <item value="The type of values that the datepicker expects depends on the type of `DateAdapter` provided in your&#10;application. The `NativeDateAdapter`, for example, works directly with plain JavaScript `Date`&#10;objects. When using the `MomentDateAdapter`, however, the values will all be Moment.js instances.&#10;This use of the adapter pattern allows the datepicker component to work with any arbitrary date representation with a custom `DateAdapter`. See [_Choosing a date implementation_](#choosing-a-date-implementation-and-date-format-settings) for more information." />
      <item value="Notice that the emitted value does not affect the current value in the connected `&lt;input&gt;`, which is only bound to the selection made in the `month` view. So if the end user closes the calendar after choosing a year in `multi-view` mode (by pressing the `ESC` key, for example), the selected year, emitted by `yearSelected` output, will not cause any change in the value of the date in the associated `&lt;input&gt;`." />
      <item value="When a year or a month is selected in `multi-year` and `year` views respectively, the `yearSelected` and `monthSelected` outputs emit a normalized date representing the chosen year or month. By &quot;normalized&quot; we mean that the dates representing years will have their month set to January and their day set to the 1st. Dates representing months will have their day set to the 1st of the month. For example, if `&lt;mat-datepicker&gt;` is configured to work with javascript native Date objects, the `yearSelected` will emit `new Date(2017, 0, 1)` if the user selects 2017 in `multi-year` view. Similarly, `monthSelected` will emit `new Date(2017, 1, 1)` if the user selects **February** in `year` view and the current date value of the connected `&lt;input&gt;` was set to something like `new Date(2017, MM, dd)` when the calendar was opened (the month and day are irrelevant in this case)." />
      <item value="In order to facilitate easily styling the dropdown panel, `&lt;mat-select&gt;` has a `panelClass` property which can be used to apply additional CSS classes to the dropdown panel." />
      <item value="### Disabling the ripple effect" />
      <item value="The `&lt;mat-select&gt;` also supports all of the form directives from the core `FormsModule` (`NgModel`) and `ReactiveFormsModule` (`FormControl`, `FormGroup`, etc.) As with native `&lt;select&gt;`, `&lt;mat-select&gt;` also supports a `compareWith` function. (Additional information about using a custom `compareWith` function can be found in the [Angular forms documentation](https://angular.io/api/forms/SelectControlValueAccessor#caveat-option-selection))." />
      <item value="[Material Design spec](https://material.io/design/components/menus.html). It is designed to work inside of a [`&lt;mat-form-field&gt;`](https://material.angular.io/components/form-field/overview) element." />
      <item value="All radio-buttons with the same `name` comprise a set from which only one may be selected at a time." />
      <item value="Indicates that something is happening without conveying a discrete progress" />
      <item value="In &quot;query&quot; mode, the progress-bar renders as an inverted &quot;indeterminate&quot; bar. Once the response progress is available, the `mode` should be changed to determinate to convey the progress. In this mode the `value` property is ignored." />
      <item value="For situations where the user wants to indicate pre-loading (until the loading can actually be made), use the query indicator." />
      <item value="In &quot;buffer&quot; mode, `value` determines the progress of the primary bar while the `bufferValue` is used to show the additional buffering progress." />
      <item value="Operations where the user wants to indicate some activity or loading from the server, use the buffer indicator." />
      <item value="Indeterminate" />
      <item value="Operations where the percentage of the operation complete is known should use the determinate indicator." />
      <item value="indeterminate" />
      <item value="determinate" />
      <item value="`&lt;mat-progress-bar&gt;` is a horizontal progress-bar for indicating progress and activity." />
      <item value="1. The label for the length of each page." />
      <item value="### Toggling the menu programmatically" />
      <item value="By itself, the `&lt;mat-menu&gt;` element does not render anything. The menu is attached to and opened via application of the `matMenuTriggerFor` directive:" />
      <item value="If the list is used to present a list of non-interactive content items, then the list element should be given `role=&quot;list&quot;` and each list item should be given `role=&quot;listitem&quot;`." />
      <item value="By default, the list assumes that it will be used in a purely decorative fashion and thus sets no roles, ARIA attributes, or keyboard shortcuts. This is equivalent to having a sequence of `&lt;div&gt;` elements on the page. Any interactive content within the list should be given an appropriate accessibility treatment based on the specific workflow of your application." />
      <item value="#### Custom scenarios" />
      <item value="When the list-items navigate somewhere, `&lt;mat-nav-list&gt;` should be used with `&lt;a mat-list-item&gt;` elements as the list items. The nav-list will be rendered using `role=&quot;navigation&quot;` and can be given an `aria-label` to give context on the set of navigation options presented. Additional interactive content, such as buttons, should _not_ be added inside the anchors." />
      <item value="The type of list used in any given situation depends on how the end-user will be interacting with the it." />
      <item value="Lists are also available in &quot;dense layout&quot; mode, which shrinks the font size and height of the list to suit UIs that may need to display more information. To enable this mode, add a `dense` attribute to the main `mat-list` tag." />
      <item value="### Dense lists" />
      <item value="For lists that require multiple lines per item, annotate each line with an `matLine` attribute. Whichever heading tag is appropriate for your DOM hierarchy should be used (not necessarily `&lt;h3&gt;` as shown in the example)." />
      <item value="### Selection lists" />
      <item value="Simple navigation lists can use the `mat-list-item` attribute on anchor tag elements directly:" />
      <item value="### Simple lists" />
      <item value="`&lt;mat-list&gt;` is a container component that wraps and formats a series of line items. As the base list component, it provides Material Design styling, but no behavior of its own." />
      <item value="This error is thrown when you attempt to set an input's `type` property to a value that isn't supported by the `matInput` directive. If you need to use an unsupported input type with `&lt;mat-form-field&gt;` consider writing a [custom form field control](https://material.angular.io/guide/creating-a-custom-form-field-control) for it." />
      <item value="### Troubleshooting" />
      <item value="The CDK provides [utilities](https://material.angular.io/cdk/text-field/overview#monitoring-the-autofill-state-of-an-input) for detecting when an input becomes autofilled and changing the appearance of the autofilled state." />
      <item value="### Responding to changes in the autofill state of an `&lt;input&gt;`" />
      <item value="A global error state matcher can be specified by setting the `ErrorStateMatcher` provider. This applies to all inputs. For convenience, `ShowOnDirtyErrorStateMatcher` is available in order to globally cause input errors to show when the input is dirty and invalid." />
      <item value="An `ErrorStateMatcher` must implement a single method `isErrorState` which takes the `FormControl` for this `matInput` as well as the parent form and returns a boolean indicating whether errors should be shown. (`true` indicating that they should be shown, and `false` indicating that they should not.)" />
      <item value="The `&lt;mat-form-field&gt;` allows you to [associate error messages](https://material.angular.io/components/form-field/overview#error-messages) with your `matInput`. By default, these error messages are shown when the control is invalid and either the user has interacted with (touched) the element or the parent form has been submitted. If you wish to override this behavior (e.g. to show the error as soon as the invalid control is dirty or when a parent form group is invalid), you can use the `errorStateMatcher` property of the `matInput`. The property takes an instance of an `ErrorStateMatcher` object. An `ErrorStateMatcher` must implement a single method `isErrorState` which takes the `FormControl` for this `matInput` as well as the parent form and returns a boolean indicating whether errors should be shown. (`true` indicating that they should be shown, and `false` indicating that they should not.)" />
      <item value="Changing when error messages are shown" />
      <item value="It is used to give the user an additional hint about what they should type in the input." />
      <item value="The placeholder is text shown when the `&lt;mat-form-field&gt;` label is floating but the input is empty." />
      <item value="Add a `&lt;span&gt;` as an adjacent sibling to the `&lt;mat-icon&gt;` element with text that conveys the same information as the icon." />
      <item value="When the presence of an icon communicates some information to the user whether as an indicator or by being inlined into a block of text, that information must also be made available to screen-readers. The most straightforward way to do this is to" />
      <item value="Icons alone are not interactive elements for screen-reader users; when the user would interact with some icon on the page, a more appropriate element should &quot;own&quot; the interaction:" />
      <item value="cosmetic" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="163" />
        <entry key="ENGLISH" value="164" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>