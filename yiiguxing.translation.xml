<application>
  <component name="AppStorage">
    <histories>
      <item value="Icons alone are not interactive elements for screen-reader users; when the user would interact with some icon on the page, a more appropriate element should &quot;own&quot; the interaction:" />
      <item value="cosmetic" />
      <item value="By default icons in an RTL layout will look exactly the same as in LTR, however certain icons have to be [mirrored for RTL users](https://material.io/guidelines/usability/bidirectionality.html). If you want to mirror an icon only in an RTL layout, you can use the `mat-icon-rtl-mirror` CSS class." />
      <item value="Bidirectionality" />
      <item value="3. **Indicator**: the icon is not interactive, but it conveys some information, such as a status. This includes using the icon in place of text inside of a larger message." />
      <item value="In thinking about accessibility, it is useful to place icon use into one of three categories:" />
      <item value="pertaining" />
      <item value="Icon sets allow grouping multiple icons into a single SVG file. This is done by creating a single root `&lt;svg&gt;` tag that contains multiple nested `&lt;svg&gt;` tags in its `&lt;defs&gt;` section. Each of these nested tags is identified with an `id` attribute. This `id` is used as the name of the icon." />
      <item value="vulnerabilities" />
      <item value="When an `mat-icon` component displays an SVG icon, it does so by directly inlining the SVG content into the page as a child of the component. (Rather than using an &lt;img&gt; tag or a div background image). This makes it easier to apply CSS styles to SVG icons. For example, the default color of the SVG content is the CSS [currentColor](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentColor_keyword) value. This makes SVG icons by default have the same color as surrounding text, and allows you to change the color by setting the &quot;color&quot; style on the `mat-icon` element." />
      <item value="For both types of font icons, you can specify the default font class to use when `fontSet` is not explicitly set by calling `MatIconRegistry.setDefaultFontSetClass`." />
      <item value="Fonts can also display icons by defining a CSS class for each icon glyph, which typically uses a `:before` selector to cause the icon to appear. [FontAwesome](https://fortawesome.github.io/Font-Awesome/examples/) uses this approach to display its icons. To use such a font, set the `fontSet` input to the font's CSS class (either the class itself or an alias registered with `MatIconRegistry.registerFontClassAlias`), and set the `fontIcon` input to the class for the specific icon to show." />
      <item value="Font icons with CSS" />
      <item value="By default, `&lt;mat-icon&gt;` expects the [Material icons font](http://google.github.io/material-design-icons/#icon-font-for-the-web). (You will still need to include the HTML to load the font and its CSS, as described in the link). You can specify a different font by setting the `fontSet` input to either the CSS class to apply to use the desired font, or to an alias previously registered with `MatIconRegistry.registerFontClassAlias`." />
      <item value="Font icons with ligatures" />
      <item value="`MatIconRegistry` is an injectable service that allows you to associate icon names with SVG URLs, HTML strings and to define aliases for CSS font classes. Its methods are discussed below and listed in the API summary." />
      <item value="By default, the grid-list assumes that it will be used in a purely decorative fashion and thus sets no roles, ARIA attributes, or keyboard shortcuts. This is equivalent to having a sequence of `&lt;div&gt;` elements on the page. Any interactive content within the grid-list should be given an appropriate accessibility treatment based on the specific workflow of your application." />
      <item value="### Tile headers and footers" />
      <item value="more rows will simply be added for it the tile to fill" />
      <item value="Adding tiles that span multiple rows or columns" />
      <item value="Setting the gutter size" />
      <item value="Other components that can act as a form field control include `&lt;mat-select&gt;`, `&lt;mat-chip-list&gt;`, and any custom form field controls you've created." />
      <item value="Troubleshooting" />
      <item value="We recommend a specificity of at least 1 element + 1 class" />
      <item value="Custom content can be included before and after the input tag, as a prefix or suffix. It will be included within the visual container that wraps the form control as per the Material specification." />
      <item value="If a form field can have more than one error state, it is up to the consumer to toggle which messages should be displayed. This can be done with CSS, `ngIf` or `ngSwitch`. Multiple error messages can be shown at the same time if desired, but the `&lt;mat-form-field&gt;` only reserves enough space to display one error message at a time. Ensuring that enough space is available to display multiple errors is up to the user." />
      <item value="Error messages can be shown under the form field underline by adding `mat-error` elements inside the form field. Errors are hidden initially and will be displayed on invalid form fields after the user has interacted with the element or the parent form has been submitted. Since the errors occupy the same space as the hints, the hints are hidden when the errors are shown." />
      <item value="Hint labels are specified in one of two ways: either by using the `hintLabel` property of `&lt;mat-form-field&gt;`, or by adding a `&lt;mat-hint&gt;` element inside the form field. When adding a hint via the `hintLabel` property, it will be treated as the start hint. Hints added via the `&lt;mat-hint&gt;` hint element can be added to either side by setting the `align` property on `&lt;mat-hint&gt;` to either `start` or `end`. Attempting to add multiple hints to the same side will raise an error." />
      <item value="Hint labels are additional descriptive text that appears below the form field's underline. A `&lt;mat-form-field&gt;` can have up to two hint labels; one start-aligned (left in an LTR language, right in RTL), and one end-aligned." />
      <item value="The `floatLabel` property of `&lt;mat-form-field&gt;` can be used to change this default floating behavior. It can set to `never` to hide the label instead of float it when text is present in the form field control. It can be set to `always` to float the label even when no text is present in the form field control. It can also be set to `auto` to restore the default behavior." />
      <item value="The floating label is a text label displayed on top of the form field control when the control does not contain any text. By default, when text is present the floating label floats above the form field control. The label for a form field can be specified by adding a `mat-label` element." />
      <item value="There are a couple differences to be aware of between the `legacy` appearance and the newer `standard`, `fill`, and `outline` appearances. The `matPrefix` and `matSuffix` elements are center aligned by default for the newer appearances. The Material Design spec shows this as being the standard way to align prefix and suffix icons in the newer appearance variants. We do not recommend using text prefix and suffixes in the new variants because the label and input do not have the same alignment. It is therefore impossible to align the prefix or suffix in a way that looks good when compared with both the label and input text." />
      <item value="The `mat-form-field` supports 4 different appearance variants which can be set via the `appearance` input. The `legacy` appearance is the default style that the `mat-form-field` has traditionally had. It shows the input box with an underline underneath it. The `standard` appearance is a slightly updated version of the `legacy` appearance that has spacing that is more consistent with the `fill` and `outline` appearances. The `fill` appearance displays the form field with a filled background box in addition to the underline. Finally the `outline` appearance shows the form field with a border all the way around, not just an underline." />
      <item value="The `legacy` appearance is the default style that the `mat-form-field` has traditionally had." />
      <item value="Form field appearance variants" />
      <item value="The expansion-panel aims to mimic the experience of the native `&lt;details&gt;` and `&lt;summary&gt;` elements. The expansion panel header has `role=&quot;button&quot;` and also the attribute `aria-controls` with the expansion panel's id as value." />
      <item value="Inset dividers can also be added to provide the appearance of distinct elements in a list without cluttering content like avatar images or icons. Make sure to avoid adding an inset divider to the last element in a list, because it will overlap with the section divider." />
      <item value="Dividers can be added to lists as a means of separating content into distinct sections." />
      <item value="Inset divider" />
      <item value="By default, each dialog has `role=&quot;dialog&quot;` on the root element. The role can be changed to `alertdialog` via the `MatDialogConfig` when opening." />
      <item value="The role can be changed to&#10;`alertdialog` via the `MatDialogConfig` when opening." />
      <item value="Components created via `MatDialog` can _inject_ `MatDialogRef` and use it to close the dialog in which they are contained. When closing, an optional result value can be provided. This result value is forwarded as the result of the `afterClosed` promise." />
      <item value="#### Watching the views for changes on selected years and months" />
      <item value="The month, year, or range of years that the calendar opens to is determined by first checking if any date is currently selected, if so it will open to the month or year containing that date. Otherwise it will open to the month or year containing today's date. This behavior can be overridden by using the `startAt` property of `&lt;mat-datepicker&gt;`. In this case the calendar will open to the month or year containing the `startAt` date." />
      <item value="neutral" />
      <item value="The `MatChipInput` directive can be used together with a chip-list to streamline the interaction between the two components. This directive adds chip-specific behaviors to the input element within `&lt;mat-form-field&gt;` for adding and removing chips. The `&lt;input&gt;` with `MatChipInput` can be placed inside or outside the chip-list element." />
      <item value="Presents a list of items as a set of small, tactile entities." />
      <item value="`&lt;mat-chip-list&gt;` displays a list of values as individual, keyboard accessible, chips." />
      <item value="While the `indeterminate` property of the checkbox is true, it will render as indeterminate regardless of the `checked` value. Any interaction with the checkbox by a user (i.e., clicking) will remove the indeterminate state." />
      <item value="### Indeterminate state" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="115" />
        <entry key="ENGLISH" value="117" />
      </map>
    </option>
  </component>
</application>