<application>
  <component name="AppStorage">
    <histories>
      <item value="Invoke the tool on the command line through the `ng` executable. Online help is available on the command line. Enter the following to list commands or options for a given command (such as [generate](cli/generate)) with a short description." />
      <item value="For details about changes between versions, and information about updating from previous releases, see the Releases tab on GitHub: https://github.com/angular/angular-cli/releases" />
      <item value="The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications. You can use the tool directly in a command shell, or indirectly through an interactive UI such as [Angular Console](https://angularconsole.com)." />
      <item value="* The first parameter of `navigate()` is a delta to be applied to the current URL or the one provided in the `relativeTo` property of the second parameter (the `NavigationExtras`)." />
      <item value="* Since `navigateByUrl()` takes an absolute URL as the first parameter, it will not apply any delta to the current URL and ignores any properties in the second parameter (the `NavigationExtras`) that would change the provided URL." />
      <item value="The reconfigured `BrowserModule` to import into the app's root `AppModule`." />
      <item value="An object containing an identifier for the app to transition. * The ID must match between the client and server versions of the app." />
      <item value="* Exports required infrastructure for all Angular apps. Included by defaults in all Angular apps created with the CLI `new` command. Re-exports `CommonModule` and `ApplicationModule`, making their exports and providers available to all apps." />
      <item value="* The following example implements the `Validator` interface to create a validator directive with a custom error key." />
      <item value="* The control directive from which to get the `FormControl`." />
      <item value="* Represents a container where one or more views can be attached to a component." />
      <item value="* Exports all the basic Angular directives and pipes, such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on. Re-exported by `BrowserModule`, which is included automatically in the root `AppModule` when you create a new app with the CLI `new` command." />
      <item value="* Configures the [dependency injector](guide/glossary#injector) where it is imported with supporting services for HTTP communications." />
      <item value="Learn how to deploy your Angular app." />
      <item value="Techniques and practices for testing an Angular app." />
      <item value="Learn why and how to use the Ahead-of-Time (AOT) compiler." />
      <item value="Explanation of npm packages installed into a project by default." />
      <item value="Install the Angular QuickStart seed for faster, more efficient development on your machine." />
      <item value="Upgrading for Performance" />
      <item value="User input triggers DOM events. Angular listens to those events with event bindings that funnel updated values back into your app's components and models." />
      <item value="Define the `heroesUrl` of the form `:base/:collectionName` with the address of the heroes resource on the server. Here `base` is the resource to which requests are made, and `collectionName` is the heroes data object in the `in-memory-data-service.ts`." />
      <item value="This `getHeroes` returns the sliced list of heroes at positions 1 and 5, returning only four of the Top Heroes (2nd, 3rd, 4th, and 5th)." />
      <item value="The command scaffolds the following:" />
      <item value="**Note:** The 'heroes' string inside the factory refers to the AngularJS `HeroesService`.&#10;It is common in AngularJS apps to choose a service name for the token, for example &quot;heroes&quot;,&#10;and append the &quot;Service&quot; suffix to create the class name." />
      <item value="The constructor uses the `@Optional()` directive to prepend the origin to `heroesUrl` _if it exists_." />
      <item value="To run a production build of your app with Universal on your local system, use the following command." />
      <item value="Now let's create a few handy scripts to help us do all of this in the future.&#10;You can add these in the `&quot;server&quot;` section of the Angular configuration file, `angular.json`." />
      <item value="Set up a webpack configuration to handle the Node Express `server.ts` file and serve your application." />
      <item value="The following simple example implements a bare-bones Node Express server to fire everything up. (Note that this is for demonstration only. In a real production environment, you need to set up additional authentication and security.)" />
      <item value="This technique gives you complete flexibility. For convenience, you can also use the `@nguniversal/express-engine` tool that has some built-in features." />
      <item value="To build a server bundle for your application, use the `ng run` command, with the format `projectName#serverTarget`. In our example, there are now two targets configured, `&quot;build&quot;` and `&quot;server&quot;`." />
      <item value="Add a section for `&quot;angularCompilerOptions&quot;` and set `&quot;entryModule&quot;` to point to your `AppServerModule` instance. Use the format `importPath#symbolName`. In this example, the entry module is `app/app.server.module#AppServerModule`." />
      <item value="Create a module named `AppServerModule` to act as the root module when running on the server. This example places it alongside `app.module.ts` in a file named `app.server.module.ts`. The new module imports everything from the root `AppModule`, and adds `ServerModule`. It also adds `ModuleMapLoaderModule` to help make lazy-loaded routes possible during server-side renders with the Angular CLI." />
      <item value="Make your `AppModule` compatible with Universal by adding `.withServerTransition()` and an application ID to your `BrowserModule` import in `src/app/app.module.ts`." />
      <item value="When a browser makes an HTTP request, the server can make assumptions about cookies, XSRF headers, and so on. For example, the browser automatically sends authentication cookies for the current user. Angular Universal can't forward these credentials to a separate data server. If your server handles HTTP requests, you'll have to add your own security plumbing." />
      <item value="HTTP requests issued from a browser app aren't the same as those issued by the Universal app on the server.&#10;Universal HTTP requests have different security requirements" />
      <item value="To see a working version of an app with server-side rendering, clone the [Angular Universal starter](https://github.com/angular/universal-starter)." />
      <item value="**Note:** The [Universal tutorial](#the-example) below walks you through the steps using the Tour of Heroes sample app, and goes into more detail about what you can do and why you might want to do it." />
      <item value="The following sections go into each of these main steps in more detail." />
      <item value="1. Prepare your app by modifying both the app code and its configuration." />
      <item value="Before your app can be rendered on a server, you must make changes in the app itself, and also set up the server." />
      <item value="To make a Universal app, install the `platform-server` package, which provides server implementations of the DOM, `XMLHttpRequest`, and other low-level features that don't rely on a browser. Compile the client application with the `platform-server` module (instead of the `platform-browser` module) and run the resulting Universal app on a web server." />
      <item value="_Any_ web server technology can serve a Universal app as long as it can call Universal's `renderModuleFactory()` function. The principles and decision points discussed here apply to any web server technology." />
      <item value="A Universal web server responds to application page requests with static HTML rendered by the [Universal template engine](#universal-engine). The server receives and responds to HTTP requests from clients (usually browsers), and serves static assets such as scripts, CSS, and images.&#10;It may respond to data requests, either directly or as a proxy to a separate data server." />
      <item value="Adding a service worker to an Angular application is one of the steps for turning an application into a [Progressive Web App](https://developers.google.com/web/progressive-web-apps/) (also known as a PWA)." />
      <item value="Update the `goToHeroes()` method in the `hero-detail.component.ts` to navigate back to `/superheroes` with the optional route parameters." />
      <item value="If it doesn't return a valid `Crisis`, return an empty `Observable`, canceling the previous in-flight navigation to the `CrisisDetailComponent` and navigate the user back to the `CrisisListComponent`. The update resolver service looks like this:" />
      <item value="The `CrisisService.getCrisis` method returns an observable, in order to prevent the route from loading until the data is fetched. The `Router` guards require an observable to `complete`, meaning it has emitted all of its values. You use the `take` operator with an argument of `1` to ensure that the Observable completes after retrieving the first value from the Observable returned by the `getCrisis` method." />
      <item value="Generate a _guard_ that checks for the presence of a `canDeactivate()` method in a component&amp;mdash;any component." />
      <item value="Although the admin dashboard `RouterLink` only contains a relative slash without an additional URL segment, it is considered a match to any route within the admin feature area. You only want the `Dashboard` link to be active when the user visits that route. Adding an additional binding to the `Dashboard` routerLink,`[routerLinkActiveOptions]=&quot;{ exact: true }&quot;`, marks the `./` link as active when the user navigates to the `/admin` URL and not when navigating to any of the child routes." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="462" />
        <entry key="ENGLISH" value="466" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>