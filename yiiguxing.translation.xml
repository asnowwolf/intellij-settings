<application>
  <component name="AppStorage">
    <histories>
      <item value="In this guide, we go into greater depth on special transition states such as `*` (wildcard) and `void`, and show how these special states are used for elements entering and leaving a view. The chapter also explores on multiple animation triggers, animation callbacks and sequence-based animation using keyframes." />
      <item value="The `thresholds` property causes the tool to enforce a minimum of 80% code coverage when the unit tests are run in the project." />
      <item value="For example, suppose you want the code base to have a minimum of 80% code coverage. To enable this, open the [Karma](https://karma-runner.github.io) test platform configuration file, `karma.conf.js`, and add the following in the `coverageIstanbulReporter:` key." />
      <item value="The code coverage percentages let you estimate how much of your code is tested. If your team decides on a set minimum amount to be unit tested, you can enforce this minimum with the Angular CLI." />
      <item value="### Code coverage enforcement" />
      <item value="Code coverage reports show you any parts of our code base that may not be properly tested by your unit tests." />
      <item value="We'll be using [Headless Chrome](https://developers.google.com/web/updates/2017/04/headless-chrome#cli) in these examples." />
      <item value="When the CLI commands `ng test` and `ng e2e` are generally running the CI tests in your environment, you might still need to adjust your configuration to run the Chrome browser tests." />
      <item value="There are paid CI services like Circle CI and Travis CI, and you can also host your own for free using Jenkins and others. Although Circle CI and Travis CI are paid services, they are provided free for open source projects. You can create a public project on GitHub and add these services without paying. Contributions to the Angular repo are automatically run through a whole suite of Circle CI and Travis CI tests." />
      <item value="One of the best ways to keep your project bug free is through a test suite, but it's easy to forget to run tests all the time. Continuous integration (CI) servers let you set up your project repository so that your tests run on every commit and pull request." />
      <item value="If you want to support such case, you need to define the `macroTask` you want to support in `beforeEach()`. For example:" />
      <item value="If you want to support such case, you need to define the `macroTask` you want to support in `beforeEach()`.&#10;For example:" />
      <item value="Jasmine also provides a `clock` feature to mock dates. Angular automatically runs tests that are run after `jasmine.clock().install()` is called inside a `fakeAsync()` method until `jasmine.clock().uninstall()` is called. `fakeAsync()` is not needed and throws an error if nested." />
      <item value="`fakeAsync()` simulates passage of time, which allows you to calculate the difference between dates inside `fakeAsync()`." />
      <item value="#### Comparing dates inside fakeAsync()" />
      <item value="The `tick()` function is one of the Angular testing utilities that you import with `TestBed`.&#10;It's a companion to `fakeAsync()` and you can only call it within a `fakeAsync()` body." />
      <item value="The `tick()` function accepts milliseconds as parameter (defaults to 0 if not provided). The parameter represents how much the virtual clock advances. For example, if you have a `setTimeout(fn, 100)` in a `fakeAsync()` test, you need to use tick(100) to trigger the fn callback." />
      <item value="Defines the logic for the app's root component, named `AppComponent`. The view associated with this root component becomes the root of the [view hierarchy](guide/glossary#view-hierarchy) as you add components and services to your app." />
      <item value="Inside the `src/` folder, the `app/` folder contains your app's logic and data. Angular components, templates, and styles go here. An `assets/` subfolder contains images and anything else your app needs. Files at the top level of `src/` support testing and running your app." />
      <item value="An `e2e/` subfolder contains configuration and source files for a set of end-to-end tests that correspond to the initial app. Workspace-wide `node_modules` dependencies are visible to this project." />
      <item value="An `e2e/` subfolder contains configuration and source files for a set of end-to-end tests that correspond to the initial app.&#10;Workspace-wide `node_modules` dependencies are visible to this project." />
      <item value="&lt;t&gt;The main entry point for your app. Compiles the application with the [JIT compiler](https://angular.io/guide/glossary#jit) and bootstraps the application's root module (AppModule) to run in the browser. You can also use the [AOT compiler](https://angular.io/guide/aot-compiler) without changing any code by appending the `--aot` flag to the CLI `build` and `serve` commands. &lt;/t&gt;&lt;t&gt;&lt;/t&gt;" />
      <item value="Configures sharing of target browsers and Node.js versions among various front-end tools." />
      <item value="Besides using the CLI on the command line, You can also use an interactive development environment like [Angular Console](https://angular.console.com), or manipulate files directly in the app's source folder and configuration files." />
      <item value="&lt;t&gt;Provides version information for all packages installed into `node_modules` by the npm client. See [npm documentation](https://docs.npmjs.com/files/package-lock.json) for details. If you use the yarn client, this file will be [yarn.lock](https://yarnpkg.com/lang/en/docs/yarn-lock/) instead. &lt;/t&gt;&lt;t&gt;&lt;/t&gt;" />
      <item value="Lists package dependencies. See [npm documentation](https://docs.npmjs.com/files/package.json) for the specific format and contents of this file." />
      <item value="CLI configuration for all projects in the workspace, including configuration options for build, serve, and test tools that the CLI uses, such as [Karma](https://karma-runner.github.io/) and [Protractor](http://www.protractortest.org/)." />
      <item value="Specifies intentionally untracked files that [Git](https://git-scm.com/) should ignore." />
      <item value="The Angular CLI command `ng new &lt;project_name&gt;` gets you started." />
      <item value="If you work behind a corporate proxy, the cannot directly proxy calls to any URL outside your local network. In this case, you can configure the backend proxy to redirect calls through your corporate proxy using an agent:" />
      <item value="### Bypass the proxy" />
      <item value="Set the proxy configuration file to `proxy.conf.js` (instead of `proxy.conf.json`), and specify configuration files as in the following example." />
      <item value="### Proxy multiple entries" />
      <item value="You can use the [proxying support](https://webpack.js.org/configuration/dev-server/#devserver-proxy) in the `webpack` dev server to divert certain URLs to a backend server, by passing a file to the `--proxy-config` build option.&#10;For example, to divert all calls for `http://localhost:4200/api` to a server running on `http://localhost:3000/api`, take the following steps." />
      <item value="If you want to produce a progressive web app and are using [Lighthouse](https://developers.google.com/web/tools/lighthouse/) to grade the project, add the following browserslist entry to your `package.json` file, in order to eliminate the [old flexbox](https://developers.google.com/web/tools/lighthouse/audits/old-flexbox) prefixes:" />
      <item value="Internally, Autoprefixer relies on a library called [Browserslist](https://github.com/browserslist/browserslist) to figure out which browsers to support with prefixing. Browserlist looks for configuration options in a `browserlist` property of the package configuration file, or in a configuration file named `.browserslistrc`. Autoprefixer looks for the Browserlist configuration when it prefixes your CSS." />
      <item value="Warns when the size reaches this threshold percentage of the baseline." />
      <item value="Reports an error when the size exceeds this threshold percentage of the baseline." />
      <item value="Warns when a size exceeds this threshold percentage of the baseline." />
      <item value="## Configure size budgets" />
      <item value="You can also configure the `serve` command to use the targeted build configuration if you add it to the &quot;serve:configurations&quot; section of `angular.json`:" />
      <item value="This means that when you build your production configuration (using `ng build --prod` or `ng build --configuration=production`), the `src/environments/environment.ts` file is replaced with the target-specific version of the file, `src/environments/environment.prod.ts`." />
      <item value="The main CLI configuration file, `angular.json`, contains a `fileReplacements` section in the configuration for each build target, which allows you to replace any file with a target-specific version of that file. This is useful for including target-specific code or variables in a build that targets a specific environment, such as production or staging." />
      <item value="This ensures that the build and serve commands can find the configurations for specific build targets." />
      <item value="To use the environment configurations you have defined, your components must import the original environments file:" />
      <item value="This page discusses build-specific configuration options for Angular projects." />
      <item value="You can add target-specific configuration files, such as `environment.prod.ts`. The following sets content sets default values for the production build target:" />
      <item value="The `build` command uses this as the build target when no environment is specified. You can add further variables, either as additional properties on the environment object, or as separate objects. For example, the following adds a default for a variable to the default environment:" />
      <item value="The following figure shows how a project has multiple build targets, which can be executed using the named configurations that you define." />
      <item value="You develop apps in the context of an Angular [workspace](guide/glossary#workspace). A workspace contains the files for one or more [projects](guide/glossary#project). A project is the set of files that comprise a standalone app, a library, or a set of end-to-end (e2e) tests." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="612" />
        <entry key="ENGLISH" value="617" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>