<application>
  <component name="AppStorage">
    <histories>
      <item value="The original `open` and `closed` states, with the original changes in height, color, and opacity, occurring over a timeframe of 1 second" />
      <item value="Here's an example of using keyframes to create a pulse effect:" />
      <item value="Use keyframes to create a pulse effect in your animations by defining styles at specific offset throughout the animation." />
      <item value="### Keyframes with a pulsation" />
      <item value="The code with offsets specified would be as follows." />
      <item value="Defining offsets for keyframes is optional. If you omit them, evenly spaced offsets are automatically assigned. For example, three keyframes without predefined offsets receive offsets of 0, 0.5, and 1. Specifying an offset of 0.8 for the middle transition in the above example might look like this." />
      <item value="Keyframes include an *offset* that defines the point in the animation where each style change occurs. Offsets are relative measures from zero to one, marking the beginning and end of the animation, respectively." />
      <item value="The code for this color change might look like this." />
      <item value="Angular's `keyframe()` function is similar to keyframes in CSS. Keyframes allow several style changes within a single timing segment. For example, our button, instead of fading, could change color several times over a single 2-second timespan." />
      <item value="In the previous section, we saw a simple two-state transition. Now we'll create an animation with multiple steps run in sequence using *keyframes*." />
      <item value="Callbacks can serve as a debugging tool, for example in conjunction with `console.warn()` to view the application's progress in a browser's Developer JavaScript Console. The following code snippet creates console log output for our original example, a button with the two states of `open` and `closed`." />
      <item value="An animation can influence an end user to *perceive* the operation as faster, even when it isn't. Thus, a simple animation can be a cost-effective way to keep users happy, rather than seeking to improve the speed of a server call and having to compensate for circumstances beyond your control, such as an unreliable network connection." />
      <item value="Then, another animation can be called when the current animation finishes. For example, the button goes from the `inProgress` state to the `closed` state when the API call is completed." />
      <item value="A potential use for animation callbacks could be to cover for a slow API call, such as a database lookup. For example, you could set up the **InProgress** button to have its own looping animation where it pulsates or does some other visual motion while the backend system operation finishes." />
      <item value="In the HTML template, the animation event is passed back via `$event`, as `@trigger.start` and `@trigger.done`, where `trigger` is the name of the trigger being used. In our example, the trigger `openClose` appears as follows." />
      <item value="The animation `trigger()` function emits *callbacks* when it starts and when it finishes. In the example below we have a component that contains an `openClose` trigger." />
      <item value="However, selective child animations can still be run on a disabled parent in one of the following ways:" />
      <item value="When an element within an HTML template has animations disabled using the `@.disabled` host binding, animations are disabled on all inner elements as well. You can't selectively disable multiple animations on a single element." />
      <item value="Each time an animation is triggered in Angular, the parent animation always get priority and child animations are blocked. In order for a child animation to run, the parent animation must query each of the elements containing child animations and then allow the animations to run using the [`animateChild()`](https://angular.io/api/animations/animateChild) function." />
      <item value="You can define more than one animation trigger for a component. You can attach animation triggers to different elements, and the parent-child relationships among the elements affect how and when the animations run." />
      <item value="In the component code, in the `@Component` metadata under the `animations:` property, when the state evaluates to `true` (meaning &quot;open&quot; here), the associated HTML element's height is a wildcard style or default. In this case, use whatever height the element already had before the animation started. When the element is &quot;closed,&quot; the element animates to a height of 0, which makes it invisible." />
      <item value="In the code snippet above, the HTML template binds a `&lt;div&gt;` element to a trigger named `openClose` with a status expression of `isOpen`, and with possible values of `true` and `false`. This is an alternative to the practice of creating two named states of `open` and `close`." />
      <item value="If a trigger contains a boolean value as a binding value, then this value can be matched using a `transition()` expression that compares `true` and `false`, or `1` and `0`." />
      <item value="The `transition()` function takes additional selector values, `:increment` and `:decrement`. Use these to kick off a transition when a numeric value has increased or decreased in value." />
      <item value="In the component file, the `:enter` transition sets an initial opacity of 0, and then animates it to change that opacity to 1 as the element is inserted into the view." />
      <item value="The `:enter` transition runs when any `*ngIf` or `*ngFor` views are placed on the page, and `:leave` runs when those views are removed from the page." />
      <item value="It's harder to target an element that is entering a view because it isn't in the DOM yet.&#10;So, use the aliases `:enter` and `:leave` to target HTML elements that are inserted or removed from a view." />
      <item value="These aliases are used by several animation functions." />
      <item value="In the above code, we applied the `void` state when the HTML element isn't attached to a view." />
      <item value="When you add a hero to the list of heroes, it appears to fly onto the page from the left." />
      <item value="Now we'll add a new behavior:" />
      <item value="**Note:** For our purposes, an element entering or leaving a view is equivalent to being inserted or removed from the DOM." />
      <item value="This section shows how to animate elements entering or leaving a page." />
      <item value="A transition of `void =&gt; *` applies when the element enters a view, regardless of what state it assumes when entering." />
      <item value="A transition of `* =&gt; void` applies when the element leaves a view, regardless of what state it was in before it left." />
      <item value="You can use the `void` state to configure transitions for an element that is entering or leaving a page. See [Animating entering and leaving a view](#enter-leave-view)." />
      <item value="Use the wildcard `*` with a style to tell the animation to use whatever the current style value is, and animate with that. Wildcard is a fallback value that's used if the state being animated isn't declared within the trigger." />
      <item value="### Using wildcards with styles" />
      <item value="Transitions are matched in the order in which they are defined. Thus, you can apply other transitions on top of the `* =&gt; *` (any-to-any) transition. For example, define style changes or animations that would apply just to `open =&gt; closed`, or just to `closed =&gt; open`, and then use `* =&gt; *` as a fallback for state pairings that aren't otherwise called out." />
      <item value="In our two-state button example, the wildcard isn't that useful because there are only two possible states, `open` and `closed`. Wildcard states are better when an element in one particular state has multiple potential states that it can change to. If our button can change from `open` to either `closed` or something like `inProgress`, using a wildcard state could reduce the amount of coding needed." />
      <item value="### Using wildcard state with multiple transition states" />
      <item value="This allows us to add new states without having to include separate transitions for each one." />
      <item value="Here's another code sample using the wildcard state together with our previous example using the `open` and `closed` states. Instead of defining each state-to-state transition pair, we're now saying that any transition to `closed` takes 1 second, and any transition to `open` takes 0.5 seconds." />
      <item value="An asterisk `*` or *wildcard* matches any animation state. This is useful for defining transitions that apply regardless of the HTML element's start or end state." />
      <item value="In this guide, we go into greater depth on special transition states such as `*` (wildcard) and `void`, and show how these special states are used for elements entering and leaving a view. The chapter also explores on multiple animation triggers, animation callbacks and sequence-based animation using keyframes." />
      <item value="The `thresholds` property causes the tool to enforce a minimum of 80% code coverage when the unit tests are run in the project." />
      <item value="For example, suppose you want the code base to have a minimum of 80% code coverage. To enable this, open the [Karma](https://karma-runner.github.io) test platform configuration file, `karma.conf.js`, and add the following in the `coverageIstanbulReporter:` key." />
      <item value="The code coverage percentages let you estimate how much of your code is tested. If your team decides on a set minimum amount to be unit tested, you can enforce this minimum with the Angular CLI." />
      <item value="### Code coverage enforcement" />
      <item value="Code coverage reports show you any parts of our code base that may not be properly tested by your unit tests." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="634" />
        <entry key="ENGLISH" value="639" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>