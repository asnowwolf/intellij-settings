<application>
  <component name="AppStorage">
    <histories>
      <item value="Other components that can act as a form field control include `&lt;mat-select&gt;`, `&lt;mat-chip-list&gt;`, and any custom form field controls you've created." />
      <item value="Troubleshooting" />
      <item value="We recommend a specificity of at least 1 element + 1 class" />
      <item value="Custom content can be included before and after the input tag, as a prefix or suffix. It will be included within the visual container that wraps the form control as per the Material specification." />
      <item value="If a form field can have more than one error state, it is up to the consumer to toggle which messages should be displayed. This can be done with CSS, `ngIf` or `ngSwitch`. Multiple error messages can be shown at the same time if desired, but the `&lt;mat-form-field&gt;` only reserves enough space to display one error message at a time. Ensuring that enough space is available to display multiple errors is up to the user." />
      <item value="Error messages can be shown under the form field underline by adding `mat-error` elements inside the form field. Errors are hidden initially and will be displayed on invalid form fields after the user has interacted with the element or the parent form has been submitted. Since the errors occupy the same space as the hints, the hints are hidden when the errors are shown." />
      <item value="Hint labels are specified in one of two ways: either by using the `hintLabel` property of `&lt;mat-form-field&gt;`, or by adding a `&lt;mat-hint&gt;` element inside the form field. When adding a hint via the `hintLabel` property, it will be treated as the start hint. Hints added via the `&lt;mat-hint&gt;` hint element can be added to either side by setting the `align` property on `&lt;mat-hint&gt;` to either `start` or `end`. Attempting to add multiple hints to the same side will raise an error." />
      <item value="Hint labels are additional descriptive text that appears below the form field's underline. A `&lt;mat-form-field&gt;` can have up to two hint labels; one start-aligned (left in an LTR language, right in RTL), and one end-aligned." />
      <item value="The `floatLabel` property of `&lt;mat-form-field&gt;` can be used to change this default floating behavior. It can set to `never` to hide the label instead of float it when text is present in the form field control. It can be set to `always` to float the label even when no text is present in the form field control. It can also be set to `auto` to restore the default behavior." />
      <item value="The floating label is a text label displayed on top of the form field control when the control does not contain any text. By default, when text is present the floating label floats above the form field control. The label for a form field can be specified by adding a `mat-label` element." />
      <item value="There are a couple differences to be aware of between the `legacy` appearance and the newer `standard`, `fill`, and `outline` appearances. The `matPrefix` and `matSuffix` elements are center aligned by default for the newer appearances. The Material Design spec shows this as being the standard way to align prefix and suffix icons in the newer appearance variants. We do not recommend using text prefix and suffixes in the new variants because the label and input do not have the same alignment. It is therefore impossible to align the prefix or suffix in a way that looks good when compared with both the label and input text." />
      <item value="The `mat-form-field` supports 4 different appearance variants which can be set via the `appearance` input. The `legacy` appearance is the default style that the `mat-form-field` has traditionally had. It shows the input box with an underline underneath it. The `standard` appearance is a slightly updated version of the `legacy` appearance that has spacing that is more consistent with the `fill` and `outline` appearances. The `fill` appearance displays the form field with a filled background box in addition to the underline. Finally the `outline` appearance shows the form field with a border all the way around, not just an underline." />
      <item value="The `legacy` appearance is the default style that the `mat-form-field` has traditionally had." />
      <item value="Form field appearance variants" />
      <item value="The expansion-panel aims to mimic the experience of the native `&lt;details&gt;` and `&lt;summary&gt;` elements. The expansion panel header has `role=&quot;button&quot;` and also the attribute `aria-controls` with the expansion panel's id as value." />
      <item value="Inset dividers can also be added to provide the appearance of distinct elements in a list without cluttering content like avatar images or icons. Make sure to avoid adding an inset divider to the last element in a list, because it will overlap with the section divider." />
      <item value="Dividers can be added to lists as a means of separating content into distinct sections." />
      <item value="Inset divider" />
      <item value="By default, each dialog has `role=&quot;dialog&quot;` on the root element. The role can be changed to `alertdialog` via the `MatDialogConfig` when opening." />
      <item value="The role can be changed to&#10;`alertdialog` via the `MatDialogConfig` when opening." />
      <item value="Components created via `MatDialog` can _inject_ `MatDialogRef` and use it to close the dialog in which they are contained. When closing, an optional result value can be provided. This result value is forwarded as the result of the `afterClosed` promise." />
      <item value="#### Watching the views for changes on selected years and months" />
      <item value="The month, year, or range of years that the calendar opens to is determined by first checking if any date is currently selected, if so it will open to the month or year containing that date. Otherwise it will open to the month or year containing today's date. This behavior can be overridden by using the `startAt` property of `&lt;mat-datepicker&gt;`. In this case the calendar will open to the month or year containing the `startAt` date." />
      <item value="neutral" />
      <item value="The `MatChipInput` directive can be used together with a chip-list to streamline the interaction between the two components. This directive adds chip-specific behaviors to the input element within `&lt;mat-form-field&gt;` for adding and removing chips. The `&lt;input&gt;` with `MatChipInput` can be placed inside or outside the chip-list element." />
      <item value="Presents a list of items as a set of small, tactile entities." />
      <item value="`&lt;mat-chip-list&gt;` displays a list of values as individual, keyboard accessible, chips." />
      <item value="While the `indeterminate` property of the checkbox is true, it will render as indeterminate regardless of the `checked` value. Any interaction with the checkbox by a user (i.e., clicking) will remove the indeterminate state." />
      <item value="### Indeterminate state" />
      <item value="Depending on how cards are used, it may be appropriate to apply a `tabindex` to the `&lt;mat-card&gt;` element. If cards are a primary mechanism through which user interact with the application, `tabindex=&quot;0&quot;` is appropriate. If attention can be sent to the card, but it's not part of the document flow, `tabindex=&quot;-1&quot;` is appropriate." />
      <item value="A role is not necessary when the card is used as a purely decorative container that does not convey a meaningful grouping of related content for a single subject. In these cases, the content of the card should follow standard practices for document content." />
      <item value="There are several ARIA roles that communicate that a portion of the UI represents some semantically meaningful whole. Depending on what the content of the card means to your application, [`role=&quot;group&quot;`][0], [`role=&quot;region&quot;`][1], or [one of the landmark roles][2] should typically be applied to the `&lt;mat-card&gt;` element." />
      <item value="landmarks" />
      <item value="In addition to the aforementioned sections, `&lt;mat-card-header&gt;` gives the ability to add a rich header to a card. This header can contain:" />
      <item value="### Exclusive selection vs. multiple selection" />
      <item value="According to the Material design spec button text has to be capitalized, however we have opted not to capitalize buttons automatically via `text-transform: uppercase`, because it can cause issues in certain locales. It is also worth noting that using ALL CAPS in the text itself causes issues for screen-readers, which will read the text character-by-character. We leave the decision of how to approach this to the consuming app." />
      <item value="It is also worth noting that using ALL CAPS in the text itself causes issues for screen-readers, which will read the text character-by-character. We leave the decision of how to approach this to the consuming app." />
      <item value="capitalization" />
      <item value="Circular button with a transparent background, meant to contain an icon" />
      <item value="Rectangular contained button w/" />
      <item value="&lt;p translation-result&gt;方形&lt;/p&gt;&lt;p translation-origin=&quot;off&quot;&gt;Rectangular contained button w/ elevation &lt;/p&gt;" />
      <item value="contained" />
      <item value="Rectangular text button w/ no elevation" />
      <item value="Native `&lt;button&gt;` and `&lt;a&gt;` elements are always used in order to provide the most straightforward and accessible experience for users. A `&lt;button&gt;` element should be used whenever some _action_ is performed. An `&lt;a&gt;` element should be used whenever the user will _navigate_ to another view." />
      <item value="ripples" />
      <item value="By default, the bottom sheet has `role=&quot;dialog&quot;` on the root element and can be labelled using the `ariaLabel` property on the `MatBottomSheetConfig`." />
      <item value="Badges can be colored in terms of the current theme using the `matBadgeColor` property to set the background color to `primary`, `accent`, or `warn`." />
      <item value="The overlap of the badge in relation to its inner contents can also be defined&#10;using the `matBadgeOverlap` tag. Typically, you want the badge to overlap an icon and not a text phrase. By default it will overlap." />
      <item value="Badges are small status descriptors for UI elements. A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to&#10;another object." />
      <item value="Badges are small status descriptors for UI elements. A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="94" />
        <entry key="ENGLISH" value="96" />
      </map>
    </option>
  </component>
</application>