<application>
  <component name="AppStorage">
    <histories>
      <item value="访问性" />
      <item value="optimal" />
      <item value="\*For optimal accessibility, you may want to consider adding text guidance on the page to explain filter criteria. This is especially helpful for screenreader users if you're using a non-standard filter that doesn't limit matches to the beginning of the string." />
      <item value="Next, create the autocomplete panel and the options displayed inside it. Each option should be defined by an `mat-option` tag. Set each option's value property to whatever you'd like the value of the text input to be upon that option's selection." />
      <item value="Next, create the autocomplete panel and the options displayed inside it. Each option should be&#10;defined by an `mat-option` tag. Set each option's value property to whatever you'd like the value&#10;of the text input to be upon that option's selection." />
      <item value="It is possible to use template-driven forms instead, if you prefer." />
      <item value="It is possible to use template-driven forms instead," />
      <item value="Tools for implementing common application features." />
      <item value="Tools for displaying and interacting with tabular data." />
      <item value="Progress spinner" />
      <item value="Badge" />
      <item value="Buttons &amp; Indicators" />
      <item value="elevation" />
      <item value="typography" />
      <item value="Theming Angular Material" />
      <item value="Wraps input fields so they are displayed consistently." />
      <item value="Captures dates, agnostic about their internal representation." />
      <item value="Captures boolean input with an optional indeterminate mode." />
      <item value="Suggests relevant options as the user types." />
      <item value="Angular Material comprises a range of components which implement common interaction patterns according to the Material Design specification." />
      <item value="Themable, for when you need to stay on brand or just have a favorite color. Accessible and internationalized so that all users are welcome." />
      <item value="Versatile" />
      <item value="Finely tuned performance, because every millisecond counts. Fully tested across modern browsers." />
      <item value="Fast and Consistent" />
      <item value="Hit the ground running with comprehensive, modern UI components that work across the web, mobile and desktop." />
      <item value="Sprint from Zero to App" />
      <item value="* In the following example, a container element wraps a list of items stamped out * by an `ngFor`. The container element contains an animation trigger that will later be set * to query for each of the inner items." />
      <item value="* In the following example, a container element wraps a list of items stamped out by an `ngFor`. The container element contains an animation trigger that will later be set to query for each of the inner items." />
      <item value="An object that encapsulates the stagger data. *" />
      <item value="* Use within an animation `query()` call to issue a timing gap after each queried item is animated." />
      <item value="* - `query(&quot;:self&quot;)` : Include the current element into the animation sequence." />
      <item value="* @param selector The element to query, or a set of elements that contain Angular-specific characteristics, specified with one or more of the following tokens." />
      <item value="* Finds one or more inner elements within the current element that is being animated within a sequence. Use with `animateChild()`." />
      <item value="* Note that this feature designed to be used with `query()` and it will only work with animations that are assigned using the Angular animation library. CSS keyframes and transitions are not handled by this API." />
      <item value="* Executes a queried inner animation element within an animation sequence." />
      <item value="* If a trigger binding value is a Boolean, it can be matched using a transition expression that compares true and false or 1 and 0. For example:" />
      <item value="* The following example defines a transition that starts by hiding the element, then makes sure that it animates properly to whatever state is currently active for trigger:" />
      <item value="* If the final step in a transition is a call to `animate()` that uses a timing value with no style data, that step is automatically considered the final animation arc, for the element to reach the final state. Angular automatically adds or removes CSS styles to ensure that the element is in the correct final state." />
      <item value="* If the final step in a transition is a call to `animate()` that uses a timing value * with no style data, that step is automatically considered the final animation arc, * for the element to reach the final state. Angular automatically adds or removes * CSS styles to ensure that the element is in the correct final state." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="46" />
        <entry key="ENGLISH" value="46" />
      </map>
    </option>
  </component>
</application>