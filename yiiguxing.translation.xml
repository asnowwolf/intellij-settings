<application>
  <component name="AppStorage">
    <histories>
      <item value="The [ng generate](cli/generate) and [ng add](cli/add) commands take as an argument the artifact or library to be generated or added to the current project. In addition to any general options, each artifact or library defines its own options in a *schematic*. Schematic options are supplied to the command in the same format as immediate command options." />
      <item value="Allowed values are given with each enumerated option description, with the default value in **bold**." />
      <item value="Boolean options have two forms: `--thisOption` sets the flag, `--noThisOption` clears it. If neither option is supplied, the flag remains in its default state, as listed in the reference documentation." />
      <item value="Typically, the name of a generated artifact can be given as an argument to the command or specified with the --name option." />
      <item value="option names are prefixed with a double dash (--). option aliases are prefixed with a single dash (-). arguments are not prefixed. for example: `ng build my-app -c production`" />
      <item value="See the [complete schema](https://github.com/angular/angular-cli/wiki/angular-workspace) for `angular.json`." />
      <item value="The [ng config](cli/config) command lets you set and retrieve configuration values from the command line, or you can edit the `angular.json` file directly." />
      <item value="A single workspace configuration file, `angular.json`, is created at the top level of the workspace. This is where you can set workspace-wide defaults, and specify configurations to use when the CLI builds a project for different targets." />
      <item value="When you use the [ng serve](cli/serve) command to build an app and serve it locally, the server automatically rebuilds the app and reloads the page when you change any of the source files." />
      <item value="You can edit the generated files directly, or add to and modify them using CLI commands. Use the [ng generate](cli/generate) command to add new files for additional components and services, and code for new pipes, directives, and so on. Commands such as [add](cli/add) and [generate](cli/generate), which create or operate on apps and libraries, must be executed from within a workspace or project folder." />
      <item value="A newly generated app contains the source files for a root module, with a root component and template. Each app has a `src` folder that contains the logic, data, and assets." />
      <item value="The [ng new](cli/new) command creates an *Angular workspace* folder and generates a new app skeleton. A workspace can contain multiple apps and libraries. The initial app created by the [ng new](cli/new) command is at the top level of the workspace. When you generate an additional app or library in a workspace, it goes into a `projects/` subfolder." />
      <item value="The [ng new](cli/new) command creates an *Angular workspace* folder and generates a new app skeleton. A workspace can contain multiple apps and libraries.&#10;The initial app created by the [ng new](cli/new) command is at the top level of the workspace. When you generate an additional app or library in a workspace, it goes into a `projects/` subfolder." />
      <item value="To create, build, and serve a new, basic Angular project on a development server, go to the parent directory of your new workspace use the following commands:" />
      <item value="Invoke the tool on the command line through the `ng` executable. Online help is available on the command line. Enter the following to list commands or options for a given command (such as [generate](cli/generate)) with a short description." />
      <item value="For details about changes between versions, and information about updating from previous releases, see the Releases tab on GitHub: https://github.com/angular/angular-cli/releases" />
      <item value="The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications. You can use the tool directly in a command shell, or indirectly through an interactive UI such as [Angular Console](https://angularconsole.com)." />
      <item value="* The first parameter of `navigate()` is a delta to be applied to the current URL or the one provided in the `relativeTo` property of the second parameter (the `NavigationExtras`)." />
      <item value="* Since `navigateByUrl()` takes an absolute URL as the first parameter, it will not apply any delta to the current URL and ignores any properties in the second parameter (the `NavigationExtras`) that would change the provided URL." />
      <item value="The reconfigured `BrowserModule` to import into the app's root `AppModule`." />
      <item value="An object containing an identifier for the app to transition. * The ID must match between the client and server versions of the app." />
      <item value="* Exports required infrastructure for all Angular apps. Included by defaults in all Angular apps created with the CLI `new` command. Re-exports `CommonModule` and `ApplicationModule`, making their exports and providers available to all apps." />
      <item value="* The following example implements the `Validator` interface to create a validator directive with a custom error key." />
      <item value="* The control directive from which to get the `FormControl`." />
      <item value="* Represents a container where one or more views can be attached to a component." />
      <item value="* Exports all the basic Angular directives and pipes, such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on. Re-exported by `BrowserModule`, which is included automatically in the root `AppModule` when you create a new app with the CLI `new` command." />
      <item value="* Configures the [dependency injector](guide/glossary#injector) where it is imported with supporting services for HTTP communications." />
      <item value="Learn how to deploy your Angular app." />
      <item value="Techniques and practices for testing an Angular app." />
      <item value="Learn why and how to use the Ahead-of-Time (AOT) compiler." />
      <item value="Explanation of npm packages installed into a project by default." />
      <item value="Install the Angular QuickStart seed for faster, more efficient development on your machine." />
      <item value="Upgrading for Performance" />
      <item value="User input triggers DOM events. Angular listens to those events with event bindings that funnel updated values back into your app's components and models." />
      <item value="Define the `heroesUrl` of the form `:base/:collectionName` with the address of the heroes resource on the server. Here `base` is the resource to which requests are made, and `collectionName` is the heroes data object in the `in-memory-data-service.ts`." />
      <item value="This `getHeroes` returns the sliced list of heroes at positions 1 and 5, returning only four of the Top Heroes (2nd, 3rd, 4th, and 5th)." />
      <item value="The command scaffolds the following:" />
      <item value="**Note:** The 'heroes' string inside the factory refers to the AngularJS `HeroesService`.&#10;It is common in AngularJS apps to choose a service name for the token, for example &quot;heroes&quot;,&#10;and append the &quot;Service&quot; suffix to create the class name." />
      <item value="The constructor uses the `@Optional()` directive to prepend the origin to `heroesUrl` _if it exists_." />
      <item value="To run a production build of your app with Universal on your local system, use the following command." />
      <item value="Now let's create a few handy scripts to help us do all of this in the future.&#10;You can add these in the `&quot;server&quot;` section of the Angular configuration file, `angular.json`." />
      <item value="Set up a webpack configuration to handle the Node Express `server.ts` file and serve your application." />
      <item value="The following simple example implements a bare-bones Node Express server to fire everything up. (Note that this is for demonstration only. In a real production environment, you need to set up additional authentication and security.)" />
      <item value="This technique gives you complete flexibility. For convenience, you can also use the `@nguniversal/express-engine` tool that has some built-in features." />
      <item value="To build a server bundle for your application, use the `ng run` command, with the format `projectName#serverTarget`. In our example, there are now two targets configured, `&quot;build&quot;` and `&quot;server&quot;`." />
      <item value="Add a section for `&quot;angularCompilerOptions&quot;` and set `&quot;entryModule&quot;` to point to your `AppServerModule` instance. Use the format `importPath#symbolName`. In this example, the entry module is `app/app.server.module#AppServerModule`." />
      <item value="Create a module named `AppServerModule` to act as the root module when running on the server. This example places it alongside `app.module.ts` in a file named `app.server.module.ts`. The new module imports everything from the root `AppModule`, and adds `ServerModule`. It also adds `ModuleMapLoaderModule` to help make lazy-loaded routes possible during server-side renders with the Angular CLI." />
      <item value="Make your `AppModule` compatible with Universal by adding `.withServerTransition()` and an application ID to your `BrowserModule` import in `src/app/app.module.ts`." />
      <item value="When a browser makes an HTTP request, the server can make assumptions about cookies, XSRF headers, and so on. For example, the browser automatically sends authentication cookies for the current user. Angular Universal can't forward these credentials to a separate data server. If your server handles HTTP requests, you'll have to add your own security plumbing." />
      <item value="HTTP requests issued from a browser app aren't the same as those issued by the Universal app on the server.&#10;Universal HTTP requests have different security requirements" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="469" />
        <entry key="ENGLISH" value="473" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>