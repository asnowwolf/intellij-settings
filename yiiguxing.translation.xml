<application>
  <component name="AppStorage">
    <histories>
      <item value="Each time an animation is triggered in Angular, the parent animation always get priority and child animations are blocked. In order for a child animation to run, the parent animation must query each of the elements containing child animations and then allow the animations to run using the [`animateChild()`](https://angular.io/api/animations/animateChild) function." />
      <item value="You can define more than one animation trigger for a component. You can attach animation triggers to different elements, and the parent-child relationships among the elements affect how and when the animations run." />
      <item value="In the component code, in the `@Component` metadata under the `animations:` property, when the state evaluates to `true` (meaning &quot;open&quot; here), the associated HTML element's height is a wildcard style or default. In this case, use whatever height the element already had before the animation started. When the element is &quot;closed,&quot; the element animates to a height of 0, which makes it invisible." />
      <item value="In the code snippet above, the HTML template binds a `&lt;div&gt;` element to a trigger named `openClose` with a status expression of `isOpen`, and with possible values of `true` and `false`. This is an alternative to the practice of creating two named states of `open` and `close`." />
      <item value="If a trigger contains a boolean value as a binding value, then this value can be matched using a `transition()` expression that compares `true` and `false`, or `1` and `0`." />
      <item value="The `transition()` function takes additional selector values, `:increment` and `:decrement`. Use these to kick off a transition when a numeric value has increased or decreased in value." />
      <item value="In the component file, the `:enter` transition sets an initial opacity of 0, and then animates it to change that opacity to 1 as the element is inserted into the view." />
      <item value="The `:enter` transition runs when any `*ngIf` or `*ngFor` views are placed on the page, and `:leave` runs when those views are removed from the page." />
      <item value="It's harder to target an element that is entering a view because it isn't in the DOM yet.&#10;So, use the aliases `:enter` and `:leave` to target HTML elements that are inserted or removed from a view." />
      <item value="These aliases are used by several animation functions." />
      <item value="In the above code, we applied the `void` state when the HTML element isn't attached to a view." />
      <item value="When you add a hero to the list of heroes, it appears to fly onto the page from the left." />
      <item value="Now we'll add a new behavior:" />
      <item value="**Note:** For our purposes, an element entering or leaving a view is equivalent to being inserted or removed from the DOM." />
      <item value="This section shows how to animate elements entering or leaving a page." />
      <item value="A transition of `void =&gt; *` applies when the element enters a view, regardless of what state it assumes when entering." />
      <item value="A transition of `* =&gt; void` applies when the element leaves a view, regardless of what state it was in before it left." />
      <item value="You can use the `void` state to configure transitions for an element that is entering or leaving a page. See [Animating entering and leaving a view](#enter-leave-view)." />
      <item value="Use the wildcard `*` with a style to tell the animation to use whatever the current style value is, and animate with that. Wildcard is a fallback value that's used if the state being animated isn't declared within the trigger." />
      <item value="### Using wildcards with styles" />
      <item value="Transitions are matched in the order in which they are defined. Thus, you can apply other transitions on top of the `* =&gt; *` (any-to-any) transition. For example, define style changes or animations that would apply just to `open =&gt; closed`, or just to `closed =&gt; open`, and then use `* =&gt; *` as a fallback for state pairings that aren't otherwise called out." />
      <item value="In our two-state button example, the wildcard isn't that useful because there are only two possible states, `open` and `closed`. Wildcard states are better when an element in one particular state has multiple potential states that it can change to. If our button can change from `open` to either `closed` or something like `inProgress`, using a wildcard state could reduce the amount of coding needed." />
      <item value="### Using wildcard state with multiple transition states" />
      <item value="This allows us to add new states without having to include separate transitions for each one." />
      <item value="Here's another code sample using the wildcard state together with our previous example using the `open` and `closed` states. Instead of defining each state-to-state transition pair, we're now saying that any transition to `closed` takes 1 second, and any transition to `open` takes 0.5 seconds." />
      <item value="An asterisk `*` or *wildcard* matches any animation state. This is useful for defining transitions that apply regardless of the HTML element's start or end state." />
      <item value="In this guide, we go into greater depth on special transition states such as `*` (wildcard) and `void`, and show how these special states are used for elements entering and leaving a view. The chapter also explores on multiple animation triggers, animation callbacks and sequence-based animation using keyframes." />
      <item value="The `thresholds` property causes the tool to enforce a minimum of 80% code coverage when the unit tests are run in the project." />
      <item value="For example, suppose you want the code base to have a minimum of 80% code coverage. To enable this, open the [Karma](https://karma-runner.github.io) test platform configuration file, `karma.conf.js`, and add the following in the `coverageIstanbulReporter:` key." />
      <item value="The code coverage percentages let you estimate how much of your code is tested. If your team decides on a set minimum amount to be unit tested, you can enforce this minimum with the Angular CLI." />
      <item value="### Code coverage enforcement" />
      <item value="Code coverage reports show you any parts of our code base that may not be properly tested by your unit tests." />
      <item value="We'll be using [Headless Chrome](https://developers.google.com/web/updates/2017/04/headless-chrome#cli) in these examples." />
      <item value="When the CLI commands `ng test` and `ng e2e` are generally running the CI tests in your environment, you might still need to adjust your configuration to run the Chrome browser tests." />
      <item value="There are paid CI services like Circle CI and Travis CI, and you can also host your own for free using Jenkins and others. Although Circle CI and Travis CI are paid services, they are provided free for open source projects. You can create a public project on GitHub and add these services without paying. Contributions to the Angular repo are automatically run through a whole suite of Circle CI and Travis CI tests." />
      <item value="One of the best ways to keep your project bug free is through a test suite, but it's easy to forget to run tests all the time. Continuous integration (CI) servers let you set up your project repository so that your tests run on every commit and pull request." />
      <item value="If you want to support such case, you need to define the `macroTask` you want to support in `beforeEach()`. For example:" />
      <item value="If you want to support such case, you need to define the `macroTask` you want to support in `beforeEach()`.&#10;For example:" />
      <item value="Jasmine also provides a `clock` feature to mock dates. Angular automatically runs tests that are run after `jasmine.clock().install()` is called inside a `fakeAsync()` method until `jasmine.clock().uninstall()` is called. `fakeAsync()` is not needed and throws an error if nested." />
      <item value="`fakeAsync()` simulates passage of time, which allows you to calculate the difference between dates inside `fakeAsync()`." />
      <item value="#### Comparing dates inside fakeAsync()" />
      <item value="The `tick()` function is one of the Angular testing utilities that you import with `TestBed`.&#10;It's a companion to `fakeAsync()` and you can only call it within a `fakeAsync()` body." />
      <item value="The `tick()` function accepts milliseconds as parameter (defaults to 0 if not provided). The parameter represents how much the virtual clock advances. For example, if you have a `setTimeout(fn, 100)` in a `fakeAsync()` test, you need to use tick(100) to trigger the fn callback." />
      <item value="Defines the logic for the app's root component, named `AppComponent`. The view associated with this root component becomes the root of the [view hierarchy](guide/glossary#view-hierarchy) as you add components and services to your app." />
      <item value="Inside the `src/` folder, the `app/` folder contains your app's logic and data. Angular components, templates, and styles go here. An `assets/` subfolder contains images and anything else your app needs. Files at the top level of `src/` support testing and running your app." />
      <item value="An `e2e/` subfolder contains configuration and source files for a set of end-to-end tests that correspond to the initial app. Workspace-wide `node_modules` dependencies are visible to this project." />
      <item value="An `e2e/` subfolder contains configuration and source files for a set of end-to-end tests that correspond to the initial app.&#10;Workspace-wide `node_modules` dependencies are visible to this project." />
      <item value="&lt;t&gt;The main entry point for your app. Compiles the application with the [JIT compiler](https://angular.io/guide/glossary#jit) and bootstraps the application's root module (AppModule) to run in the browser. You can also use the [AOT compiler](https://angular.io/guide/aot-compiler) without changing any code by appending the `--aot` flag to the CLI `build` and `serve` commands. &lt;/t&gt;&lt;t&gt;&lt;/t&gt;" />
      <item value="Configures sharing of target browsers and Node.js versions among various front-end tools." />
      <item value="Besides using the CLI on the command line, You can also use an interactive development environment like [Angular Console](https://angular.console.com), or manipulate files directly in the app's source folder and configuration files." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="624" />
        <entry key="ENGLISH" value="629" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>