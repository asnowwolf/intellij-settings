<application>
  <component name="AppStorage">
    <histories>
      <item value="The sample routing application does not include routing by default. When you use the [Angular CLI](cli) to create a project that will use routing, set the `--routing` option for the project or app, and for each NgModule. When you create or initialize a new project (using the CLI [`ng new`](cli/new) command) or a new app (using the [`ng generate app`](cli/generate) command), specify the `--routing` option. This tells the CLI to include the `@angular/router` npm package and create a file named `app-routing.module.ts`. You can then use routing in any NgModule that you add to the project or app. For example, the following command generates an NgModule that can use routing." />
      <item value="### Integrate routing with your app" />
      <item value="**Note:** The `RouterModule.forRoot` method is a pattern used to register application-wide providers. Read more about application-wide providers in the [Singleton services](guide/singleton-services#forroot) guide." />
      <item value="In order to use the Router, you must first register the `RouterModule` from the `@angular/router` package. Define an array of routes, `appRoutes`, and pass them to the `RouterModule.forRoot()` method. It returns a module, containing the configured `Router` service provider, plus other providers that the routing library requires. Once the application is bootstrapped, the `Router` performs the initial navigation based on the current browser URL." />
      <item value="The first configuration defines an array of two routes with simple paths leading to the `CrisisListComponent` and `HeroListComponent`. Generate the `CrisisList` and `HeroList` components." />
      <item value="Active route links cascade down through each level of the route tree, so parent and child router links can be active at the same time. To override this behavior, you can bind to the `[routerLinkActiveOptions]` input binding with the `{ exact: true }` expression. By using `{ exact: true }`, a given `RouterLink` will only be active if its URL is an exact match to the current URL." />
      <item value="The template expression to the right of the equals (=) contains a space-delimited string of CSS classes that the Router will add when this link is active (and remove when the link is inactive). You set the `RouterLinkActive` directive to a string of classes such as `[routerLinkActive]=&quot;'active fluffy'&quot;` or bind it to a component property that returns such a string." />
      <item value="On each anchor tag, you see a [property binding](guide/template-syntax#property-binding) to the `RouterLinkActive` directive that look like `routerLinkActive=&quot;...&quot;`." />
      <item value="The `RouterLinkActive` directive toggles css classes for active `RouterLink` bindings based on the current `RouterState`." />
      <item value="Compare using the form builder to creating the instances manually." />
      <item value="The form control assigned to `name` is displayed when the component is added to a template." />
      <item value="For more details about how to create scripts to generate an app in multiple languages and how to set up Apache 2 to serve them from different subdirectories, read [this tutorial by Philippe Martin](https://medium.com/@feloy/deploying-an-i18n-angular-app-with-angular-cli-fc788f17e358#.1xq4iy6fp)." />
      <item value="When you use the CLI `build` or `serve` command to build your application for different locales, change the output path using the `--outputPath` command option (along with the i18n-specific command options), so that the translation files are saved to different locations. When you are serving a locale-specific version from a subdirectory, you can also change the base URL used by your app by specifying the `--baseHref` option." />
      <item value="When you use the CLI `build` or `serve` command to build your application for different locales, change the output path using the `--outputPath` command option (along with the i18n-specific command options), so that the translation files are saved to different locations.&#10;When you are serving a locale-specific version from a subdirectory, you can also change the base URL used by your app by specifying the `--baseHref` option." />
      <item value="* Preparing text in component templates for translation." />
      <item value="Consider a Car component that depends on several services.&#10;Suppose you configured the root injector (marked as A) with _generic_ providers for&#10;`CarService`, `EngineService` and `TiresService`." />
      <item value="Library developers can create schematics that enable the CLI to generate their published libraries.&#10;For more information, see [devkit documentation](https://www.npmjs.com/package/@angular-devkit/schematics)." />
      <item value="Angular provides a set of schematics for use with the CLI. See the [Angular CLI command reference](cli). The [`ng add`](cli/add) command runs schematics as part of adding a library to your project. The [`ng generate`](cli/generate) command runs schematics to create apps, libraries, and Angular code constructs." />
      <item value="A scaffolding library that defines how to generate or transform a programming project by creating, modifying, refactoring, or moving files and code. The Angular [CLI](guide/glossary#cli) uses schematics to generate and modify [Angular projects](guide/glossary#project) and parts of projects." />
      <item value="Observables can deliver single or multiple values of any type to subscribers, either synchronously (as a function delivers a value to its caller) or on a schedule. A subscriber receives notification of new values as they are produced and notification of either normal completion or error completion." />
      <item value="The documentation generally refers to *elements* (`ElementRef` instances), as distinct from *DOM elements*&#10;(which can be accessed directly if necessary)." />
      <item value="Constructors should do little more than initialize variables.&#10;This rule makes the component safe to construct under test without fear that it will do something dramatic like talk to the server.&#10;That's why you call the `HeroService` from within the `ngOnInit` rather than the constructor." />
      <item value="Constructors should do little more than initialize variables. This rule makes the component safe to construct under test without fear that it will do something dramatic like talk to the server. That's why you call the `HeroService` from within the `ngOnInit` rather than the constructor." />
      <item value="If you comment out the `@Host()` decorator, Angular walks up the injector ancestor tree until it finds the logger at the `AppComponent` level. The logger logic kicks in and the hero display updates with the &quot;!!!&quot; marker to indicate that the logger was found." />
      <item value="You can limit the scope of an injected service to a *branch* of the application hierarchy by providing that service *at the sub-root component for that branch*. This example shows how to make a different instance of `HeroService` available to `HeroesBaseComponent` by adding it to the `providers` array of the `@Component()` decorator of the sub-component." />
      <item value="When Angular creates `AppComponent`, the DI framework creates an instance of `LoggerService` and starts to create `UserContextService`.&#10;`UserContextService` also needs `LoggerService`, which the framework already has, so the framework can provide the same instance. `UserContextService` also needs `UserService`, which the framework has yet to create. `UserService` has no further dependencies, so the framework can simply use `new` to instantiate the class and provide the instance to the `UserContextService` constructor." />
      <item value="`UserContext` in turn depends on both `LoggerService` and `UserService`, another service that gathers information about a particular user." />
      <item value="`UserContext` in turn depends on both `LoggerService` and&#10;`UserService`, another service that gathers information about a particular user." />
      <item value="* [Building and Serving](guide/build): Learn to define different build and proxy server configurations for your project, such as development, staging, and production." />
      <item value="Add the `&lt;base&gt;` element just after the `&lt;head&gt;` tag. If the `app` folder is the application root, as it is for this application, set the `href` value in **`index.html`** *exactly* as shown here." />
      <item value="Add the `&lt;base&gt;` element just after the `&lt;head&gt;` tag.&#10;If the `app` folder is the application root, as it is for this application, set the `href` value in **`index.html`** *exactly* as shown here." />
      <item value="After the Tutorial and Architecture guide, you'll be ready to continue exploring Angular on your own through the other guides and references in this documentation set, focusing on the features most important for your apps." />
      <item value="* The [Architecture guide](guide/architecture &quot;Architecture guide&quot;) describes key concepts such as modules, components, services, and dependency injection (DI). It provides a foundation for more in-depth guides about specific Angular concepts and features." />
      <item value="The [Tour of Heroes tutorial](tutorial &quot;Tour of Heroes tutorial&quot;) provides additional hands-on learning. It walks you through the steps to build an app that helps a staffing agency manage a group of superhero employees. It has many of the features you'd expect to find in a data-driven application:" />
      <item value="Now that you've seen the essentials of an Angular app and the Angular CLI, continue with these other introductory materials:" />
      <item value="## Final code review" />
      <item value="Angular, the Angular CLI, and Angular apps depend on features and functionality provided by libraries that are available as [npm packages](https://docs.npmjs.com/getting-started/what-is-npm). To download and install npm packages, you must have an npm package manager." />
      <item value="This guide takes less than 30 minutes to complete. At the end of this guide&amp;mdash;as part of final code review&amp;mdash;there is a link to download a copy of the final application code. (If you don't execute the commands in this guide, you can still download the final application code.)" />
      <item value="This guide shows you how to build and run a simple Angular app. You'll use the [Angular CLI tool](cli &quot;CLI command reference&quot;) to accelerate development, while adhering to the [Style Guide](guide/styleguide &quot;Angular style guide&quot;) recommendations that benefit _every_ Angular project." />
      <item value="Welcome to Angular! Angular helps you build modern applications for the web, mobile, or desktop." />
      <item value="It also creates the following workspace and starter project files:" />
      <item value="The Angular CLI installs the necessary Angular `npm` packages and other dependencies. This can take a few minutes." />
      <item value="The `ng new` command prompts you for information about features to include in the initial app project. Accept the defaults by pressing the Enter or Return key." />
      <item value="Ensure that you are not already in an Angular workspace folder. For example, if you have previously created the Getting Started workspace, change to the parent of that folder." />
      <item value="You develop apps in the context of an Angular [workspace](guide/glossary#workspace). A workspace contains the files for one or more [projects](guide/glossary#project). A project is the set of files that comprise an app, a library, or end-to-end (e2e) tests. For this tutorial, you will create a new workspace." />
      <item value="**Note:**: You do not need to complete the entire Getting Started. After you complete the above two sections of Getting Started, your environment is set up. Continue below to create the Tour of Heroes workspace and an initial app project." />
      <item value="  [Prerequisites](guide/quickstart#prerequisites)&#10;" />
      <item value="To set up your development environment, follow these instructions in [Getting Started](guide/quickstart):" />
      <item value="You begin by creating an initial application using the Angular CLI. Throughout this tutorial, you’ll modify and extend that starter application to create the Tour of Heroes app." />
      <item value="Another reason to re-provide a service at another level is to substitute a _ more specialized _ implementation of that service, deeper in the component tree." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="442" />
        <entry key="ENGLISH" value="446" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>