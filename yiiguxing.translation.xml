<application>
  <component name="AppStorage">
    <histories>
      <item value="Tree-shaking doesn't work here because Angular can't decide to exclude one chunk of code (the provider definition for the service within the module factory) based on whether another chunk of code (the service class) is used. To make services tree-shakable, the information about how to construct an instance of the service (the provider definition) needs to be a part of the service class itself." />
      <item value="The following example of non-tree-shakable providers in Angular configures a service provider for the injector of an NgModule." />
      <item value="Ideally, if an application isn't injecting a service, it shouldn't be included in the final output. However, Angular has to be able to identify at build time whether the service will be required or not. Because it's always possible to inject a service directly using `injector.get(Service)`, Angular can't identify all of the places in your code where this injection could happen, so it has no choice but to include the service in the injector. Thus, services provided at the NgModule or component level are not tree-shakable." />
      <item value="Tree shaking refers to a compiler option that removes code from the final bundle if that code not referenced in an application. When providers are tree-shakable, the Angular compiler removes the associated services from the final output when it determines that they are not used in your application. This significantly reduces the size of your bundles." />
      <item value="Multiple providers can be associated with a single token in other areas as well." />
      <item value="The following shows the new and the old implementations side-by-side." />
      <item value="To resolve this, we give the `HeroService` constructor a boolean flag to control display of secret heroes." />
      <item value="Let's say you don't want to inject `UserService` directly into `HeroService`, because you don't want to complicate that service with security-sensitive information." />
      <item value="In cases like this you can use a *factory provider*.&#10;Factory providers can also be useful when creating an instance of a dependency from a third-party library that wasn't designed to work with DI." />
      <item value="For example, you might need information that changes repeatedly in the course of the browser session.&#10;Also, your injectable service might not have independent access to the source of the information." />
      <item value="Although the `AppConfig` interface plays no role in dependency injection,&#10;it supports typing of the configuration object within the class." />
      <item value="The type parameter, while optional, conveys the dependency's type to developers and tooling.&#10;The token description is another developer aid." />
      <item value="Apps often define configuration objects with lots of small facts, like the title of the application or the address of a web API endpoint. These configuration objects aren't always instances of a class. They can be object literals, as shown in the following example." />
      <item value="The following provider object uses the `useValue` key to associate the variable with the `Logger` token." />
      <item value="The following code defines a variable that creates such an object to play the logger role." />
      <item value="When the old component logs a message with `OldLogger`, you want the singleton instance of `NewLogger` to handle it instead. In this case, the dependency injector should inject that singleton instance when a component asks for either the new or the old logger. `OldLogger` should be an *alias* for `NewLogger`." />
      <item value="The class-provider syntax is a shorthand expression that expands into a provider configuration, defined by the [`Provider` interface](api/core/Provider). The following code snippets shows how a class that is given as the `providers` value is expanded into a full provider object." />
      <item value="* You can provide a substitute class." />
      <item value="You can, however, configure an injector with an alternative provider, in order to deliver some other object that provides the needed logging functionality. For instance:" />
      <item value="The [ng generate](cli/generate) and [ng add](cli/add) commands take as an argument the artifact or library to be generated or added to the current project. In addition to any general options, each artifact or library defines its own options in a *schematic*. Schematic options are supplied to the command in the same format as immediate command options." />
      <item value="Allowed values are given with each enumerated option description, with the default value in **bold**." />
      <item value="Boolean options have two forms: `--thisOption` sets the flag, `--noThisOption` clears it. If neither option is supplied, the flag remains in its default state, as listed in the reference documentation." />
      <item value="Typically, the name of a generated artifact can be given as an argument to the command or specified with the --name option." />
      <item value="option names are prefixed with a double dash (--). option aliases are prefixed with a single dash (-). arguments are not prefixed. for example: `ng build my-app -c production`" />
      <item value="See the [complete schema](https://github.com/angular/angular-cli/wiki/angular-workspace) for `angular.json`." />
      <item value="The [ng config](cli/config) command lets you set and retrieve configuration values from the command line, or you can edit the `angular.json` file directly." />
      <item value="A single workspace configuration file, `angular.json`, is created at the top level of the workspace. This is where you can set workspace-wide defaults, and specify configurations to use when the CLI builds a project for different targets." />
      <item value="When you use the [ng serve](cli/serve) command to build an app and serve it locally, the server automatically rebuilds the app and reloads the page when you change any of the source files." />
      <item value="You can edit the generated files directly, or add to and modify them using CLI commands. Use the [ng generate](cli/generate) command to add new files for additional components and services, and code for new pipes, directives, and so on. Commands such as [add](cli/add) and [generate](cli/generate), which create or operate on apps and libraries, must be executed from within a workspace or project folder." />
      <item value="A newly generated app contains the source files for a root module, with a root component and template. Each app has a `src` folder that contains the logic, data, and assets." />
      <item value="The [ng new](cli/new) command creates an *Angular workspace* folder and generates a new app skeleton. A workspace can contain multiple apps and libraries. The initial app created by the [ng new](cli/new) command is at the top level of the workspace. When you generate an additional app or library in a workspace, it goes into a `projects/` subfolder." />
      <item value="The [ng new](cli/new) command creates an *Angular workspace* folder and generates a new app skeleton. A workspace can contain multiple apps and libraries.&#10;The initial app created by the [ng new](cli/new) command is at the top level of the workspace. When you generate an additional app or library in a workspace, it goes into a `projects/` subfolder." />
      <item value="To create, build, and serve a new, basic Angular project on a development server, go to the parent directory of your new workspace use the following commands:" />
      <item value="Invoke the tool on the command line through the `ng` executable. Online help is available on the command line. Enter the following to list commands or options for a given command (such as [generate](cli/generate)) with a short description." />
      <item value="For details about changes between versions, and information about updating from previous releases, see the Releases tab on GitHub: https://github.com/angular/angular-cli/releases" />
      <item value="The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications. You can use the tool directly in a command shell, or indirectly through an interactive UI such as [Angular Console](https://angularconsole.com)." />
      <item value="* The first parameter of `navigate()` is a delta to be applied to the current URL or the one provided in the `relativeTo` property of the second parameter (the `NavigationExtras`)." />
      <item value="* Since `navigateByUrl()` takes an absolute URL as the first parameter, it will not apply any delta to the current URL and ignores any properties in the second parameter (the `NavigationExtras`) that would change the provided URL." />
      <item value="The reconfigured `BrowserModule` to import into the app's root `AppModule`." />
      <item value="An object containing an identifier for the app to transition. * The ID must match between the client and server versions of the app." />
      <item value="* Exports required infrastructure for all Angular apps. Included by defaults in all Angular apps created with the CLI `new` command. Re-exports `CommonModule` and `ApplicationModule`, making their exports and providers available to all apps." />
      <item value="* The following example implements the `Validator` interface to create a validator directive with a custom error key." />
      <item value="* The control directive from which to get the `FormControl`." />
      <item value="* Represents a container where one or more views can be attached to a component." />
      <item value="* Exports all the basic Angular directives and pipes, such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on. Re-exported by `BrowserModule`, which is included automatically in the root `AppModule` when you create a new app with the CLI `new` command." />
      <item value="* Configures the [dependency injector](guide/glossary#injector) where it is imported with supporting services for HTTP communications." />
      <item value="Learn how to deploy your Angular app." />
      <item value="Techniques and practices for testing an Angular app." />
      <item value="Learn why and how to use the Ahead-of-Time (AOT) compiler." />
      <item value="Explanation of npm packages installed into a project by default." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="486" />
        <entry key="ENGLISH" value="490" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>