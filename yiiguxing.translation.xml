<application>
  <component name="AppStorage">
    <histories>
      <item value="The constructor uses the `@Optional()` directive to prepend the origin to `heroesUrl` _if it exists_." />
      <item value="To run a production build of your app with Universal on your local system, use the following command." />
      <item value="Now let's create a few handy scripts to help us do all of this in the future.&#10;You can add these in the `&quot;server&quot;` section of the Angular configuration file, `angular.json`." />
      <item value="Set up a webpack configuration to handle the Node Express `server.ts` file and serve your application." />
      <item value="The following simple example implements a bare-bones Node Express server to fire everything up. (Note that this is for demonstration only. In a real production environment, you need to set up additional authentication and security.)" />
      <item value="This technique gives you complete flexibility. For convenience, you can also use the `@nguniversal/express-engine` tool that has some built-in features." />
      <item value="To build a server bundle for your application, use the `ng run` command, with the format `projectName#serverTarget`. In our example, there are now two targets configured, `&quot;build&quot;` and `&quot;server&quot;`." />
      <item value="Add a section for `&quot;angularCompilerOptions&quot;` and set `&quot;entryModule&quot;` to point to your `AppServerModule` instance. Use the format `importPath#symbolName`. In this example, the entry module is `app/app.server.module#AppServerModule`." />
      <item value="Create a module named `AppServerModule` to act as the root module when running on the server. This example places it alongside `app.module.ts` in a file named `app.server.module.ts`. The new module imports everything from the root `AppModule`, and adds `ServerModule`. It also adds `ModuleMapLoaderModule` to help make lazy-loaded routes possible during server-side renders with the Angular CLI." />
      <item value="Make your `AppModule` compatible with Universal by adding `.withServerTransition()` and an application ID to your `BrowserModule` import in `src/app/app.module.ts`." />
      <item value="When a browser makes an HTTP request, the server can make assumptions about cookies, XSRF headers, and so on. For example, the browser automatically sends authentication cookies for the current user. Angular Universal can't forward these credentials to a separate data server. If your server handles HTTP requests, you'll have to add your own security plumbing." />
      <item value="HTTP requests issued from a browser app aren't the same as those issued by the Universal app on the server.&#10;Universal HTTP requests have different security requirements" />
      <item value="To see a working version of an app with server-side rendering, clone the [Angular Universal starter](https://github.com/angular/universal-starter)." />
      <item value="**Note:** The [Universal tutorial](#the-example) below walks you through the steps using the Tour of Heroes sample app, and goes into more detail about what you can do and why you might want to do it." />
      <item value="The following sections go into each of these main steps in more detail." />
      <item value="1. Prepare your app by modifying both the app code and its configuration." />
      <item value="Before your app can be rendered on a server, you must make changes in the app itself, and also set up the server." />
      <item value="To make a Universal app, install the `platform-server` package, which provides server implementations of the DOM, `XMLHttpRequest`, and other low-level features that don't rely on a browser. Compile the client application with the `platform-server` module (instead of the `platform-browser` module) and run the resulting Universal app on a web server." />
      <item value="_Any_ web server technology can serve a Universal app as long as it can call Universal's `renderModuleFactory()` function. The principles and decision points discussed here apply to any web server technology." />
      <item value="A Universal web server responds to application page requests with static HTML rendered by the [Universal template engine](#universal-engine). The server receives and responds to HTTP requests from clients (usually browsers), and serves static assets such as scripts, CSS, and images.&#10;It may respond to data requests, either directly or as a proxy to a separate data server." />
      <item value="Adding a service worker to an Angular application is one of the steps for turning an application into a [Progressive Web App](https://developers.google.com/web/progressive-web-apps/) (also known as a PWA)." />
      <item value="Update the `goToHeroes()` method in the `hero-detail.component.ts` to navigate back to `/superheroes` with the optional route parameters." />
      <item value="If it doesn't return a valid `Crisis`, return an empty `Observable`, canceling the previous in-flight navigation to the `CrisisDetailComponent` and navigate the user back to the `CrisisListComponent`. The update resolver service looks like this:" />
      <item value="The `CrisisService.getCrisis` method returns an observable, in order to prevent the route from loading until the data is fetched. The `Router` guards require an observable to `complete`, meaning it has emitted all of its values. You use the `take` operator with an argument of `1` to ensure that the Observable completes after retrieving the first value from the Observable returned by the `getCrisis` method." />
      <item value="Generate a _guard_ that checks for the presence of a `canDeactivate()` method in a component&amp;mdash;any component." />
      <item value="Although the admin dashboard `RouterLink` only contains a relative slash without an additional URL segment, it is considered a match to any route within the admin feature area. You only want the `Dashboard` link to be active when the user visits that route. Adding an additional binding to the `Dashboard` routerLink,`[routerLinkActiveOptions]=&quot;{ exact: true }&quot;`, marks the `./` link as active when the user navigates to the `/admin` URL and not when navigating to any of the child routes." />
      <item value="The `@routeAnimation` property is bound to the `getAnimationData` with the provided `routerOutlet` reference, so you'll need to define that function in the `AppComponent`. The `getAnimationData` function returns the animation property from the `data` provided through the `ActivatedRoute`. The `animation` property matches the `transition` names you used in the `slideDownAnimation` defined in `animations.ts`." />
      <item value="* Defines one *transition* when switching back and forth from the `heroes` and `hero` routes to ease the component in from the left of the screen as it enters the application view (`:enter`), the other to animate the component to the right as it leaves the application view (`:leave`)." />
      <item value="* Update the relative path import to the `message.service` in the `hero.service.ts` file." />
      <item value="This creates a separate file named `my-module-routing.module.ts` to store the NgModule's routes.&#10;The file includes an empty `Routes` object that you can fill with routes to different components and NgModules." />
      <item value="For example, the following command generates an NgModule that can use routing." />
      <item value="The sample routing application does not include routing by default. When you use the [Angular CLI](cli) to create a project that will use routing, set the `--routing` option for the project or app, and for each NgModule. When you create or initialize a new project (using the CLI [`ng new`](cli/new) command) or a new app (using the [`ng generate app`](cli/generate) command), specify the `--routing` option. This tells the CLI to include the `@angular/router` npm package and create a file named `app-routing.module.ts`. You can then use routing in any NgModule that you add to the project or app. For example, the following command generates an NgModule that can use routing." />
      <item value="### Integrate routing with your app" />
      <item value="**Note:** The `RouterModule.forRoot` method is a pattern used to register application-wide providers. Read more about application-wide providers in the [Singleton services](guide/singleton-services#forroot) guide." />
      <item value="In order to use the Router, you must first register the `RouterModule` from the `@angular/router` package. Define an array of routes, `appRoutes`, and pass them to the `RouterModule.forRoot()` method. It returns a module, containing the configured `Router` service provider, plus other providers that the routing library requires. Once the application is bootstrapped, the `Router` performs the initial navigation based on the current browser URL." />
      <item value="The first configuration defines an array of two routes with simple paths leading to the `CrisisListComponent` and `HeroListComponent`. Generate the `CrisisList` and `HeroList` components." />
      <item value="Active route links cascade down through each level of the route tree, so parent and child router links can be active at the same time. To override this behavior, you can bind to the `[routerLinkActiveOptions]` input binding with the `{ exact: true }` expression. By using `{ exact: true }`, a given `RouterLink` will only be active if its URL is an exact match to the current URL." />
      <item value="The template expression to the right of the equals (=) contains a space-delimited string of CSS classes that the Router will add when this link is active (and remove when the link is inactive). You set the `RouterLinkActive` directive to a string of classes such as `[routerLinkActive]=&quot;'active fluffy'&quot;` or bind it to a component property that returns such a string." />
      <item value="On each anchor tag, you see a [property binding](guide/template-syntax#property-binding) to the `RouterLinkActive` directive that look like `routerLinkActive=&quot;...&quot;`." />
      <item value="The `RouterLinkActive` directive toggles css classes for active `RouterLink` bindings based on the current `RouterState`." />
      <item value="Compare using the form builder to creating the instances manually." />
      <item value="The form control assigned to `name` is displayed when the component is added to a template." />
      <item value="For more details about how to create scripts to generate an app in multiple languages and how to set up Apache 2 to serve them from different subdirectories, read [this tutorial by Philippe Martin](https://medium.com/@feloy/deploying-an-i18n-angular-app-with-angular-cli-fc788f17e358#.1xq4iy6fp)." />
      <item value="When you use the CLI `build` or `serve` command to build your application for different locales, change the output path using the `--outputPath` command option (along with the i18n-specific command options), so that the translation files are saved to different locations. When you are serving a locale-specific version from a subdirectory, you can also change the base URL used by your app by specifying the `--baseHref` option." />
      <item value="When you use the CLI `build` or `serve` command to build your application for different locales, change the output path using the `--outputPath` command option (along with the i18n-specific command options), so that the translation files are saved to different locations.&#10;When you are serving a locale-specific version from a subdirectory, you can also change the base URL used by your app by specifying the `--baseHref` option." />
      <item value="* Preparing text in component templates for translation." />
      <item value="Consider a Car component that depends on several services.&#10;Suppose you configured the root injector (marked as A) with _generic_ providers for&#10;`CarService`, `EngineService` and `TiresService`." />
      <item value="Library developers can create schematics that enable the CLI to generate their published libraries.&#10;For more information, see [devkit documentation](https://www.npmjs.com/package/@angular-devkit/schematics)." />
      <item value="Angular provides a set of schematics for use with the CLI. See the [Angular CLI command reference](cli). The [`ng add`](cli/add) command runs schematics as part of adding a library to your project. The [`ng generate`](cli/generate) command runs schematics to create apps, libraries, and Angular code constructs." />
      <item value="A scaffolding library that defines how to generate or transform a programming project by creating, modifying, refactoring, or moving files and code. The Angular [CLI](guide/glossary#cli) uses schematics to generate and modify [Angular projects](guide/glossary#project) and parts of projects." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="449" />
        <entry key="ENGLISH" value="453" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>