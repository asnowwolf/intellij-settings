<application>
  <component name="AppStorage">
    <histories>
      <item value="Angular Material tab set organize content into separate views where only one view can be visible at a time. Each tab's label is shown in the tab header and the active tab's label is designated with the animated ink bar. When the list of tab labels exceeds the width of the header, pagination controls appear to let the user scroll left and right across the labels." />
      <item value="Angular Material tabs organize content into separate views where only one view can be visible at a time. Each tab's label is shown in the tab header and the active tab's label is designated with the animated ink bar. When the list of tab labels exceeds the width of the header, pagination controls appear to let the user scroll left and right across the labels." />
      <item value="the content that can be expanded upon selection is given `role=&quot;tabpanel&quot;`" />
      <item value="the content that can be expanded upon selection is given&#10;`role=&quot;tabpanel&quot;`" />
      <item value="Labels used by the stepper are provided through `MatStepperIntl`. Localization of these messages can be done by providing a subclass with translated values in your application root module." />
      <item value="Note that you aren't limited to using the `mat-icon` component when providing custom icons." />
      <item value="however" />
      <item value="Snack-bars that have an action available should not be given a `duration`, as to accomodate screen-reader users that want to navigate to the snack-bar element to activate the action. If the user has manually moved their focus within the snackbar, focus should be placed somewhere sensible based on the application context when the snack-bar is dismissed." />
      <item value="Utilities to respond to changes in LTR/RTL layout direction." />
      <item value="A configurable component for displaying tabular data." />
      <item value="Displays short actionable messages as an uninvasive alert." />
      <item value="Presents a list of items as a set of small, tactile entities." />
      <item value="A small value indicator that can be overlaid on another object." />
      <item value="A groupable on/off toggle for enabling and disabling options." />
      <item value="An interactive button with a range of presentation options." />
      <item value="Only presents one view at a time from a provided set of views." />
      <item value="Presents content as steps through which to progress." />
      <item value="Presents conventional lists of items." />
      <item value="A styled container for pieces of itemized content." />
      <item value="`MatSnackBar` is a service for displaying snack-bar notifications." />
      <item value="The `tickInterval` can also be set to `auto` which will automatically choose the number of steps such that there is at least `30px` of space between ticks." />
      <item value="By default, sliders do not show tick marks along the thumb track. This can be enabled using the tickInterval attribute. The value of tickInterval should be a number representing the number of steps between between ticks. For example a tickInterval of 3 with a step of 4 will draw tick marks at every 3 steps, which is the same as every 12 values." />
      <item value="By default, sliders do not show tick marks along the thumb track. This can be enabled using the `tickInterval` attribute. The value of `tickInterval` should be a number representing the number of steps between between ticks. For example a `tickInterval` of `3` with a `step` of `4` will draw tick marks at every `3` steps, which is the same as every `12` values." />
      <item value="By default, the value in the slider's thumb label will be the same as the model value, however this may end up being too large to fit into the label. If you want to control the value that is being displayed, you can do so using the `displayWith` input." />
      <item value="discrete" />
      <item value="An `invert` attribute is also available which can be specified to flip the axis that the thumb moves along. An inverted horizontal slider will have the minimum value on the right and the maximum value on the left, while an inverted vertical slider will have the minimum value on top and the maximum value on bottom." />
      <item value="By default the minimum value of the slider is `0`, the maximum value is `100`, and the thumb moves in increments of `1`. These values can be changed by setting the `min`, `max`, and `step` attributes respectively. The initial value is set to the minimum value unless otherwise specified." />
      <item value="_Note: the sliding behavior for this component requires that HammerJS is loaded on the page._" />
      <item value="`&lt;mat-slider&gt;` allows for the selection of a value from a range via mouse, touch, or keyboard, similar to `&lt;input type=&quot;range&quot;&gt;`." />
      <item value="The `&lt;mat-sidenav&gt;` an `&lt;mat-sidenav-content&gt;` should each be given an appropriate `role` attribute depending on the context in which they are used." />
      <item value="To react to scrolling inside the `&lt;mat-sidenav-container&gt;`, you can get a hold of the underlying `CdkScrollable` instance through the `MatSidenavContainer`." />
      <item value="By default, Material will only measure and resize the drawer container in a few key moments (on open, on window resize, on mode change) in order to avoid layout thrashing, however there are cases where this can be problematic. If your app requires for a drawer to change its width while it is open, you can use the `autosize` option to tell Material to continue measuring it. Note that you should use this option **at your own risk**, because it could cause performance issues." />
      <item value="thrashing" />
      <item value="The `over` and `push` sidenav modes show a backdrop by default, while the `side` mode does not." />
      <item value="Sidenav appears side-by-side with the main content, shrinking the main content's width to make space for the sidenav." />
      <item value="&lt;p translation-result&gt;侧边栏和主内容&lt;/p&gt;&lt;p translation-origin=&quot;off&quot;&gt;Sidenav appears side-by-side with the main content, shrinking the main content's width to make space for the sidenav.&lt;/p&gt;" />
      <item value="backdrop" />
      <item value="analogous" />
      <item value="side content" />
      <item value="alongside" />
      <item value="Angular Material provides two sets of components designed to add collapsible side content (often navigation, though it can be any content) alongside some primary content. These are the sidenav and drawer components." />
      <item value="#### Error: A MatDatepicker can only be associated with a single input" />
      <item value="IDENTICAL" />
      <item value="identical" />
      <item value="You will also want to make sure that the `MAT_DATE_FORMATS` provided in your app are formats that can be understood by your date implementation. See [_Customizing the parse and display formats_](#customizing-the-parse-and-display-formats)for more information about `MAT_DATE_FORMATS`. &lt;!-- TODO(mmalerba): Add a guide about this --&gt;" />
      <item value="accomplished" />
      <item value="By default the `MomentDateAdapter` will creates dates in your time zone specific locale. You can change the default behaviour to parse dates as UTC by providing the `MAT_MOMENT_DATE_ADAPTER_OPTIONS` and setting it to `useUtc: true`." />
      <item value="Because `DateAdapter` is a generic class, `MatDatepicker` and `MatDatepickerInput` also need to be made generic. When working with these classes (for example as a `ViewChild`) you should include the appropriate generic type that corresponds to the `DateAdapter` implementation you are using. For example:" />
      <item value="Because `DateAdapter` is a generic class," />
      <item value="*Please note: `MatNativeDateModule` is based off of the functionality available in JavaScript's native `Date` object, and is thus not suitable for many locales. One of the biggest shortcomings of the native `Date` object is the inability to set the parse format. We highly recommend using the `MomentDateAdapter` or a custom `DateAdapter` that works with the formatting/parsing library of your choice.*" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="228" />
        <entry key="ENGLISH" value="230" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
</application>