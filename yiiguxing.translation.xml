<application>
  <component name="AppStorage">
    <histories>
      <item value="If the list is used to present a list of non-interactive content items, then the list element should be given `role=&quot;list&quot;` and each list item should be given `role=&quot;listitem&quot;`." />
      <item value="By default, the list assumes that it will be used in a purely decorative fashion and thus sets no roles, ARIA attributes, or keyboard shortcuts. This is equivalent to having a sequence of `&lt;div&gt;` elements on the page. Any interactive content within the list should be given an appropriate accessibility treatment based on the specific workflow of your application." />
      <item value="#### Custom scenarios" />
      <item value="When the list-items navigate somewhere, `&lt;mat-nav-list&gt;` should be used with `&lt;a mat-list-item&gt;` elements as the list items. The nav-list will be rendered using `role=&quot;navigation&quot;` and can be given an `aria-label` to give context on the set of navigation options presented. Additional interactive content, such as buttons, should _not_ be added inside the anchors." />
      <item value="The type of list used in any given situation depends on how the end-user will be interacting with the it." />
      <item value="Lists are also available in &quot;dense layout&quot; mode, which shrinks the font size and height of the list to suit UIs that may need to display more information. To enable this mode, add a `dense` attribute to the main `mat-list` tag." />
      <item value="### Dense lists" />
      <item value="For lists that require multiple lines per item, annotate each line with an `matLine` attribute. Whichever heading tag is appropriate for your DOM hierarchy should be used (not necessarily `&lt;h3&gt;` as shown in the example)." />
      <item value="### Selection lists" />
      <item value="Simple navigation lists can use the `mat-list-item` attribute on anchor tag elements directly:" />
      <item value="### Simple lists" />
      <item value="`&lt;mat-list&gt;` is a container component that wraps and formats a series of line items. As the base list component, it provides Material Design styling, but no behavior of its own." />
      <item value="This error is thrown when you attempt to set an input's `type` property to a value that isn't supported by the `matInput` directive. If you need to use an unsupported input type with `&lt;mat-form-field&gt;` consider writing a [custom form field control](https://material.angular.io/guide/creating-a-custom-form-field-control) for it." />
      <item value="### Troubleshooting" />
      <item value="The CDK provides [utilities](https://material.angular.io/cdk/text-field/overview#monitoring-the-autofill-state-of-an-input) for detecting when an input becomes autofilled and changing the appearance of the autofilled state." />
      <item value="### Responding to changes in the autofill state of an `&lt;input&gt;`" />
      <item value="A global error state matcher can be specified by setting the `ErrorStateMatcher` provider. This applies to all inputs. For convenience, `ShowOnDirtyErrorStateMatcher` is available in order to globally cause input errors to show when the input is dirty and invalid." />
      <item value="An `ErrorStateMatcher` must implement a single method `isErrorState` which takes the `FormControl` for this `matInput` as well as the parent form and returns a boolean indicating whether errors should be shown. (`true` indicating that they should be shown, and `false` indicating that they should not.)" />
      <item value="The `&lt;mat-form-field&gt;` allows you to [associate error messages](https://material.angular.io/components/form-field/overview#error-messages) with your `matInput`. By default, these error messages are shown when the control is invalid and either the user has interacted with (touched) the element or the parent form has been submitted. If you wish to override this behavior (e.g. to show the error as soon as the invalid control is dirty or when a parent form group is invalid), you can use the `errorStateMatcher` property of the `matInput`. The property takes an instance of an `ErrorStateMatcher` object. An `ErrorStateMatcher` must implement a single method `isErrorState` which takes the `FormControl` for this `matInput` as well as the parent form and returns a boolean indicating whether errors should be shown. (`true` indicating that they should be shown, and `false` indicating that they should not.)" />
      <item value="Changing when error messages are shown" />
      <item value="It is used to give the user an additional hint about what they should type in the input." />
      <item value="The placeholder is text shown when the `&lt;mat-form-field&gt;` label is floating but the input is empty." />
      <item value="Add a `&lt;span&gt;` as an adjacent sibling to the `&lt;mat-icon&gt;` element with text that conveys the same information as the icon." />
      <item value="When the presence of an icon communicates some information to the user whether as an indicator or by being inlined into a block of text, that information must also be made available to screen-readers. The most straightforward way to do this is to" />
      <item value="Icons alone are not interactive elements for screen-reader users; when the user would interact with some icon on the page, a more appropriate element should &quot;own&quot; the interaction:" />
      <item value="cosmetic" />
      <item value="By default icons in an RTL layout will look exactly the same as in LTR, however certain icons have to be [mirrored for RTL users](https://material.io/guidelines/usability/bidirectionality.html). If you want to mirror an icon only in an RTL layout, you can use the `mat-icon-rtl-mirror` CSS class." />
      <item value="Bidirectionality" />
      <item value="3. **Indicator**: the icon is not interactive, but it conveys some information, such as a status. This includes using the icon in place of text inside of a larger message." />
      <item value="In thinking about accessibility, it is useful to place icon use into one of three categories:" />
      <item value="pertaining" />
      <item value="Icon sets allow grouping multiple icons into a single SVG file. This is done by creating a single root `&lt;svg&gt;` tag that contains multiple nested `&lt;svg&gt;` tags in its `&lt;defs&gt;` section. Each of these nested tags is identified with an `id` attribute. This `id` is used as the name of the icon." />
      <item value="vulnerabilities" />
      <item value="When an `mat-icon` component displays an SVG icon, it does so by directly inlining the SVG content into the page as a child of the component. (Rather than using an &lt;img&gt; tag or a div background image). This makes it easier to apply CSS styles to SVG icons. For example, the default color of the SVG content is the CSS [currentColor](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#currentColor_keyword) value. This makes SVG icons by default have the same color as surrounding text, and allows you to change the color by setting the &quot;color&quot; style on the `mat-icon` element." />
      <item value="For both types of font icons, you can specify the default font class to use when `fontSet` is not explicitly set by calling `MatIconRegistry.setDefaultFontSetClass`." />
      <item value="Fonts can also display icons by defining a CSS class for each icon glyph, which typically uses a `:before` selector to cause the icon to appear. [FontAwesome](https://fortawesome.github.io/Font-Awesome/examples/) uses this approach to display its icons. To use such a font, set the `fontSet` input to the font's CSS class (either the class itself or an alias registered with `MatIconRegistry.registerFontClassAlias`), and set the `fontIcon` input to the class for the specific icon to show." />
      <item value="Font icons with CSS" />
      <item value="By default, `&lt;mat-icon&gt;` expects the [Material icons font](http://google.github.io/material-design-icons/#icon-font-for-the-web). (You will still need to include the HTML to load the font and its CSS, as described in the link). You can specify a different font by setting the `fontSet` input to either the CSS class to apply to use the desired font, or to an alias previously registered with `MatIconRegistry.registerFontClassAlias`." />
      <item value="Font icons with ligatures" />
      <item value="`MatIconRegistry` is an injectable service that allows you to associate icon names with SVG URLs, HTML strings and to define aliases for CSS font classes. Its methods are discussed below and listed in the API summary." />
      <item value="By default, the grid-list assumes that it will be used in a purely decorative fashion and thus sets no roles, ARIA attributes, or keyboard shortcuts. This is equivalent to having a sequence of `&lt;div&gt;` elements on the page. Any interactive content within the grid-list should be given an appropriate accessibility treatment based on the specific workflow of your application." />
      <item value="### Tile headers and footers" />
      <item value="more rows will simply be added for it the tile to fill" />
      <item value="Adding tiles that span multiple rows or columns" />
      <item value="Setting the gutter size" />
      <item value="Other components that can act as a form field control include `&lt;mat-select&gt;`, `&lt;mat-chip-list&gt;`, and any custom form field controls you've created." />
      <item value="Troubleshooting" />
      <item value="We recommend a specificity of at least 1 element + 1 class" />
      <item value="Custom content can be included before and after the input tag, as a prefix or suffix. It will be included within the visual container that wraps the form control as per the Material specification." />
      <item value="If a form field can have more than one error state, it is up to the consumer to toggle which messages should be displayed. This can be done with CSS, `ngIf` or `ngSwitch`. Multiple error messages can be shown at the same time if desired, but the `&lt;mat-form-field&gt;` only reserves enough space to display one error message at a time. Ensuring that enough space is available to display multiple errors is up to the user." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="139" />
        <entry key="ENGLISH" value="141" />
      </map>
    </option>
  </component>
</application>